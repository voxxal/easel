const K = 10 // Learning rate - how quickly does the rating get updated
const R = 2 * 400 // This is the 2 * the difference in points required for a player to be expected to win 76% of the time against another player
const SustainPower = 1 // When a Grandmaster fights a Newbie, suppress impact on the Grandmaster's rating by this power
const MaxActivityBonus = 100

pub accumulator owner.Rating(rating=1000)
pub accumulator owner.UnrankedRating(unranked=1000)
pub accumulator owner.ActivityBonus

pub signal owner.Rating:OnChange(rating, delta)

pub fn Rating:Accumulate(ranking) {
	let numPlayers = Length(ranking)
	for i in Range(0,numPlayers) {
		let me = ranking[i]
		if !me.IsHuman { continue }

		let selfUnranked = me.Unranked
		let selfRating = selfUnranked ? me.UnrankedRating : me.Rating
		let adjustment = 0

		for j in Range(0,numPlayers) {
			if i == j { continue }

			let opponent = ranking[j]
			if !opponent.IsHuman { continue }
			else if me.Team == opponent.Team { continue }
			else if me.UserId == opponent.UserId { continue }

			let opponentUnranked = opponent.Unranked
			let opponentRating = opponentUnranked ? opponent.UnrankedRating : opponent.Rating

			const score = i < j ? 1 : 0 // win == 1, loss == 0
			const diff = opponentRating - selfRating
			const winProbability = 1 / (1 + 10 ** (diff / R))
			const sustainFactor = (1 - winProbability) ** SustainPower
			adjustment += sustainFactor * K * (score - winProbability)
		}

		if selfUnranked {
			me.Accumulate<UnrankedRating>(adjustment)

		} else {
			let delta = adjustment
			if delta != 0 {
				me.Accumulate<Rating>(adjustment, showOnLeaderboard=true)
				me.AccumulateLater<Rating>(0, after=30d, showOnLeaderboard=false, key=$activity)

				let activityBonus = me.ActivityBonus
				if activityBonus < MaxActivityBonus {
					me.Accumulate<ActivityBonus>(1)
					me.AccumulateLater<ActivityBonus>(-1, after=30d)

					delta += 1
					me.Accumulate<Rating>(1)
					me.AccumulateLater<Rating>(-1, after=30d)
				}

				me.Rating:OnChange(rating = selfRating + delta, delta=)
			}
		}
	}
}

pub fn owner.Rating:AnnounceChange(rating, delta) {
	Transmission<ratingAdjustment> {
		P {
			%("Your rating is now ")

			Span(bold=true) {
				%(FindLeague(rating).name + " " + FormatToFixed(rating,0))
			}

			let color = delta > 0 ? #4f0 : #f04
			%(" (")
			Span(bold=true, color=) {
				%(Rating:FormatDelta(delta))
			}
			%(")")
		}
	}
}

fn Rating:FormatDelta(delta) {
	let formatted = Abs(delta) < 1 ? FormatToPrecision(delta, 0) : FormatToFixed(delta, 0)
	if delta >= 0.0 {
		formatted = "+" + formatted
	}
	return formatted
}