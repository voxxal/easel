symbol HealthbarFork
symbol BackgroundSprite
symbol FillSprite
symbol HintSprite

pub behavior fn this.Healthbar(life, .. body, height=0.2, width, verticalOffset, advent=3s, backgroundColor=#0008, depth=Depth:Indicator) {
	if !(life && body && life.MaxHp && height > 0.0 && width > 0.0) {
		// Zero-sized healthbar means no healthbar
		delete Healthbar
		return
	}

	.. strobe=false, noRotation=true

	let up = verticalOffset
	let right = width / 2.0
	let left = -right

	// Before start of game
	await ReadyToBegin

	if !HasCommenced {
		loop {
			await TickEnd

			let proportion = CommenceTick ? (CommenceTick - Tick) / Max(1,advent) : 1.0
			if proportion <= 0 {
				break // The game has started
			}

			Sprite<FillSprite>(body, color=proportion.Mix(#8f8, #fff)) {
				Line(cap=true, radius=height, points=[@(left,up), @(right,up)])
			}
		}
	}

	// During game
	Sprite<BackgroundSprite>(color=backgroundColor, depth=depth+1) {
		Line(cap=true, radius=height, points=[@(left,up), @(right,up)])
	}

	let indicatorHp = life.Hp
	loop {
		await TickEnd

		// Render
		let hp = life.Hp
		let proportion = hp / life.MaxHp
		let hintProportion = indicatorHp / life.MaxHp
		let color = proportion.BlendHue(#f04, #0f0)
		let hintColor = hintProportion > proportion ? #fff : Darken(color, 0.5)

		let mid = left + proportion * width
		let hint = left + hintProportion * width
		if hint > mid {
			// Lost health
			Sprite<FillSprite>(color=) {
				Line(headCap=true, radius=height, points=[@(left,up), @(mid,up)])
			}

			Sprite<HintSprite>(color=hintColor) {
				Line(tailCap=!(hint < right), radius=height, points=[@(mid,up), @(hint,up)])
			}

		} else if hint == mid {
			Sprite<FillSprite>(color=) {
				Line(headCap=true, tailCap=!(mid < right), radius=height, points=[@(left,up), @(mid,up)])
			}
			delete Sprite<HintSprite>

		} else {
			// Gained health
			Sprite<FillSprite>(color=) {
				Line(headCap=true, radius=height, points=[@(left,up), @(hint,up)])
			}

			Sprite<HintSprite>(color=hintColor) {
				Line(tailCap=!(mid < right), radius=height, points=[@(hint,up), @(mid,up)])
			}
		}

		// Update indicatorHp
		let delta = hp - indicatorHp
		if delta == 0.0 {
			// Stop refreshing the healthbar until the health changes
			await life.Hp
		} else {
			if Abs(delta) < 1.0 {
				// Close enough
				indicatorHp = hp
			} else if delta > 0.0 {
				// Adjust upwards slower so lifesteal clearer
				indicatorHp += 0.01 * delta
			} else {
				indicatorHp += 0.025 * delta
			}
		}
	}
}

pub delete fn this.Healthbar {
	delete Sprite<BackgroundSprite>
	delete Sprite<FillSprite>
	delete Sprite<HintSprite>
}