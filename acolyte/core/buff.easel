pub signal unit.CleanseBuffs

field unit.PreviousBuff<Id>
field unit.PreviousBuffOwner<Id>
field unit.PreviousBuffStacks<Id>

pub fn unit.SpawnBuff(.. cleansable=false) .. *buff {
	return Subspawn buff {
		if cleansable {
			Buff:Cleansable(unit)
		}
		delve(.. buff)
	}
}

pub fn unit.ReplaceBuff<Id>(.. cleansable=false) .. *buff {
	unit.PreviousBuff<Id>.Despawn

	return Subspawn buff {
		if cleansable {
			Buff:Cleansable(unit)
		}
		unit.PreviousBuff<Id> = buff
		delve(.. buff)
	}
}

pub fn unit.StackBuff<Id>(.. maxStacks=null, owner?=null, cleansable=false) stacks .. *buff {
	let stacks = 0
	if unit.PreviousBuff<Id>.Despawn {
		if unit.PreviousBuffOwner<Id> == owner {
			stacks = Min(maxStacks, (unit.PreviousBuffStacks<Id> ?? 0) + 1)
		}
	}

	return Subspawn buff {
		if cleansable {
			Buff:Cleansable(unit)
		}

		unit.PreviousBuff<Id> = buff
		unit.PreviousBuffStacks<Id> = stacks
		unit.PreviousBuffOwner<Id> = owner
		delve(stacks, .. buff)
	}
}

fn buff.Buff:Cleansable(unit) {
	if unit {
		once CleanseBuffs {
			Despawn
		}
	}
}

pub fn BuffMultiplier(modifiers) {
	let increase = 0
	let decrease = 0
	for modifier in modifiers {
		if modifier > 0 {
			increase = Max(increase, modifier)
		} else if modifier < 0 {
			decrease = Min(decrease, modifier)
		}
	}
	return (1 + increase) * Max(0, 1 + decrease)
}