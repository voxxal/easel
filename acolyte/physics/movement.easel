prop body.Movement:TargetAngle
prop body.Movement:TargetPosition

pub signal body.Movement:Walked(step)
pub signal body.Movement:Turned(step)

pub fn body.Movement:Look(heading) {
	body.Movement:TargetAngle = heading
}

pub fn body.Movement:LookAt(target) {
	body.Movement:TargetAngle = Angle(target - body.Pos)
}

pub fn body.Movement:WalkTo(target) {
	body.Movement:TargetPosition = target
}

pub fn Movement:Stop(body) {
	body.Movement:TargetPosition = null
	body.Movement:TargetAngle = null
}

pub behavior fn this.Movement:Walk(body, speed) {
	loop {
		await PhysicsStart

		// Step towards the target
		let target = body.Movement:TargetPosition
		if !target {
			// If no target, wait for one
			await body.Movement:TargetPosition
			continue
		}

		let limit = body.SpeedModifier * speed / TicksPerSecond

		let delta = target - body.Pos
		let step = delta
		if Length(step) > limit {
			step = Truncate(step, limit)
		} else {
			// We will have arrived after body step
			body.Movement:TargetPosition = null
		}

		body.ApplyPositionStep(step)
		body.Movement:Walked(step)
	}
}

pub behavior fn this.Movement:Turn(body, turnRate=1revs) {
	loop {
		await PhysicsStart

		// Step towards the target
		let target = body.Movement:TargetAngle
		if !target {
			// If no target, wait for one
			await body.Movement:TargetAngle
			continue
		}

		let limit = body.TurnRateModifier * turnRate

		let delta = body.Heading.AngleDelta(target)
		let step = delta
		if Abs(step) > limit {
			step = Truncate(step, limit)
		} else {
			// We will have arrived after body step
			body.Movement:TargetAngle = null
		}

		body.ApplyTurningStep(step)
		body.Movement:Turned(step)
	}
}

pub fn body.Movement:WalkWith(parent) {
	on parent.Movement:Walked step {
		body.ApplyPositionStep(step)
	}
}

pub fn body.Movement:TurnWith(parent) {
	on parent.Movement:Turned step {
		body.ApplyTurningStep(step)
	}
}