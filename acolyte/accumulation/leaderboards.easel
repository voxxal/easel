pub page fn owner.HighestRatedLeaderboard {
    Content {
        LeaderboardRankedModeSwitcher

        LeaderboardSelector(HighestRatedLeaderboard)

        H1 { "Best Players" }
        RenderLoginReminder
    }

    Content<leaderboard> {
        P { "Loading..." }
    }

    once FetchLeaderboard([&Rating, &NumLifetimeGames]) ranking {
        Content<leaderboard> {
            let rank = 1
            for player in ranking %%{
                use league = FindLeague(player.Rating)
                ShinyPanel(backgroundColor=LeagueColor, vPadding=0.4) {
                    HStack {
                        RenderRank(rank)
                        RenderLeagueMedal(league)
                        RenderPlayerNameLink(player)

                        P(fontSize=0.75, color=#eee, reveal=true) {
                            %(player.NumLifetimeGames)
                            " games"
                        }

                        Blank(expand=true)

                        P {
                            %(player.Rating.FormatWithDecimals(0))
                            " rating"
                        }
                    }
                }

                rank += 1
            }
        }
    }
}

pub page fn owner.MostGamesLeaderboard {
    Content {
        LeaderboardRankedModeSwitcher

        LeaderboardSelector(MostGamesLeaderboard)

        H1 { "Most Games" }
        RenderLoginReminder
    }

    Content<leaderboard> {
        P { "Loading..." }
    }

    once FetchLeaderboard([&NumLifetimeGames, &Rating]) ranking {
        Content<leaderboard> {
            let rank = 1
            for player in ranking %%{
                use league = FindLeague(player.Rating)
                ShinyPanel(backgroundColor=LeagueColor, vPadding=0.4) {
                    HStack {
                        RenderRank(rank)
                        RenderLeagueMedal(league)
                        RenderPlayerNameLink(player)

                        P(fontSize=0.75, color=#eee, reveal=true) {
                            %(player.Rating.FormatWithDecimals(0))
                            " rating"
                        }

                        Blank(expand=true)

                        P {
                            %(player.NumLifetimeGames)
                            " games"
                        }
                    }
                }

                rank += 1
            }
        }
    }
}

fn LeaderboardSelector(selected, [ui]) {
    HStack(gap=0.5) {
        LeaderboardSelectorOption(HighestRatedLeaderboard, name="Best")
        LeaderboardSelectorOption(MostGamesLeaderboard, name="Most Games")
    }
}
fn LeaderboardSelectorOption(intent, name, [ui, selected]) {
    let isSelected = selected == intent
    Button(
        intent,
        backgroundColor = isSelected ? #fff3 : #fff1,
        color = isSelected ? Color:Accent : null) {

        %(name)
    }
}

fn RenderRank(rank, [ui]) {
    P(fontSize=0.75, color=#eee, width=1.5, align=Align:Center) {
        %(rank)
    }
}

fn RenderLeagueMedal(league, [ui]) {
    PipMedal(shadow=0.5, backgroundColor=LeagueColor, tooltip=LeagueName, borderRounding=0.5) {
        Image(LeagueGlyph, height=1.5, shadow=0.2)
    }
}

fn RenderPlayerNameLink(player, [ui]) {
    P(fontSize=1.2, bold=true) {
        SubtleLink(ProfilePage(player.UserId)) {
            PlayerNameDisplay(player)
        }
    }
}

fn RenderLoginReminder([owner, ui]) {
    P(fontSize=0.9) {
        if !IsUserLoggedIn {
            "Would you like to appear on the leaderboard? Please "
            Link(LoginIntent) { "login" }
            "."
        }
    }
}

fn this.LeaderboardRankedModeSwitcher([owner, ui]) {
    if IsUserLoggedIn {
        RankedModeSwitcher
        Blank(height=5)
    }
}