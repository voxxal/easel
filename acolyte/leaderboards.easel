pub page fn owner.HighestRatedLeaderboard {
    Section {
        LeaderboardSelector

        H1 { %("Best Players") }

        LeaderboardRows([&Rating, &NumGames]) player {
            Span(scale=0.75, color=#eee, reveal=true) {
                %(player.NumGames)
                %(" games")
            }
            Right {
                Span {
                    %(FormatToFixed(player.Rating, 0))
                    %(" rating")
                }
            }
        }
    }
}

pub page fn owner.MostGamesLeaderboard {
    Section {
        LeaderboardSelector

        H1 { %("Most Games") }

        LeaderboardRows([&NumGames, &Rating]) player {
            Span(scale=0.75, color=#eee, reveal=true) {
                %(FormatToFixed(player.Rating, 0))
                %(" rating")
            }
            Right {
                Span {
                    %(player.NumGames)
                    %(" games")
                }
            }
        }
    }
}

fn LeaderboardSelector(.. ui) {
    Row {
        Pill(onPress=HighestRatedLeaderboard) { %("Best") }
        Pill(onPress=MostGamesLeaderboard) { %("Most Games") }
    }
}

fn this.LeaderboardRows(fields, .. ui, limit=100) player .. ui {
    // First output a loading message inside a Fragment so we can replace it later
    Fragment<leaderboard> {
        Span { %("Loading...") }
    }

    // Then fetch the leaderboard and once that has returned the ranking, replace the Fragment with the real data
    once FetchLeaderboard(fields, limit=) ranking {
        Fragment<leaderboard> {
            let rank = 1
            for player in ranking {
                let league = FindLeague(player.Rating)
                Sash(backgroundColor=league.color) {
                    Span(scale=0.75, color=#eee, chars=2, align=$center) {
                        %(rank)
                    }
                    Medal(glyph=league.glyph, scale=1.2, backgroundColor=league.color, tooltip=league.name)
                    Span(scale=1.2, bold=true) {
                        Link(tier=$subtle, onPress=player.UserId) {
                            %(player.PlayerName)
                        }
                    }

                    delve(player)
                }

                rank += 1
            }
        }
    }
}