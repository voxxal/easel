pub fn body.Aoe:ForEach(aoe, .. filter=Category:Aoe) that {
	for that in QueryColliders.WhereCategory(filter).FindAllWithinRadius(body.Pos, aoe) {
		delve(that)
	}
}

pub fn this.Aoe:Indicator<Id?>(aoe, body, .. color, ownerColor?, owner?, luminous?=1.0) {
	Sprite<Id + aoeIndicator>(body, depth=Depth:Indicator, crater=0.85) {
		Circle(radius=aoe)
	}
}

pub fn body.Aoe:Impulse(that, impulse) {
	if that.Category & Category:Aoe {
		let outward = that.Pos - body.Pos
		that.ApplyImpulse(impulse * Direction(outward))
	}
}

pub fn body.Aoe:ImpulseAttenuated(that, impulse, aoe, attenuate=1.0) {
	if that.Category & Category:Aoe {
		let outward = that.Pos - body.Pos
		let impulse = impulse * (Length(outward) / aoe).Mix(1.0, attenuate)
		that.ApplyImpulse(impulse * Direction(outward))
	}
}

pub fn body.Aoe:Destroy(that, .. owner) {
	if that.Category & Category:Destructible && (Alliance(that, owner) & Alliance:NotFriendly) {
		that.Expire
	}
}