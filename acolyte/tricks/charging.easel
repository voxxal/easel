pub prop incantation.ChargeProportion

pub await fn incantation.ChargeForDuration(chargeDuration) .. *charger {
	incantation.ChargeProportion = 0

	await Subscope charger {
		delve(charger)

		const start = Tick
		loop {
			const proportion = ((Tick - start) / chargeDuration).Min(1.0)
			incantation.ChargeProportion = proportion
			if proportion >= 1.0 { break }
			await Tick
		}
	}
}

pub await fn incantation.ChargeUntilReleased(chargeDuration, .. ability, minProportion=1.0) .. *charger {
	incantation.ChargeProportion = 0

	await Subscope charger {
		delve(charger)

		// Wait until the user releases the button and the charge is at least the minimum proportion
		once ability.ReleaseCommand {
			while incantation.ChargeProportion < minProportion {
				await incantation.ChargeProportion
			}
			StopCharging
		}

		const start = Tick
		loop {
			const proportion = ((Tick - start) / chargeDuration).Min(1.0)
			incantation.ChargeProportion = proportion
			if proportion >= 1.0 { break }
			await Tick
		}

		await charger.Expire
	}
}

pub fn charger.StopCharging {
	charger.Expire
}

pub fn this.ChargingIndicator(
	body,
	..
	incantation,
	radius=1.8, crater?,
	color, ownerColor?, owner?, shadow=0.5,
	luminous=1, flicker?, glare=0, glareAlpha=1, bloom=3.0, bloomAlpha=0.5,
	depth=Depth:Charger) {

	hook incantation.ChargeProportion {
		Sprite<chargingIndicator>(body, noRotation=true, color=color.WithOpacity(ChargeProportion)) {
			Circle
		}
	}
}