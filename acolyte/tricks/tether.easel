pub signal unit.SeverTethers

pub fn projectile.TetherBuffOnHit(
	..
	unit, owner?,

	depth=Depth:Tether,
	grabbable=(Category:Hero | Category:Obstacle | Category:CanGrab),
	severable=true,
	taper=0,

	color, radius,

	audience?,
	fade?,
	bloom?, bloomAlpha?,
	crater?,
	feather?,
	flicker?,
	glare?, glareAlpha?,
	luminous?,
	ownerColor?,
	shadow?,
	shine?,
	strobe?) [that .. *buff] {
	
	.. body=projectile
	.. segments=1 // Always one segment because if it is more segments it will dissipate over multiple ticks and look weird because it does not stay connected to us

	Tether(projectile, ancestor=unit, radius=, segments=)

	on BeforeCollide that {
		if that != unit && (that.Category & grabbable) {
			delete Tether // Erase the old tether because otherwise we are going to have two
			projectile.Expire // Projectile is consumed as the tether moves from the projectile to the target

			unit.Subspawn buff {
				buff.ExpireWith(that)

				if severable {
					// Need separate IDs so the handlers don't overwrite each other
					once<severThis> unit.SeverTethers { Expire }
					once<severThat> that.SeverTethers { Expire }
				}

				Tether(that, ancestor=unit, strobe=unit, segments=, .. radius audience)

				delve(that)
			}

			break // break so we only attach to one thing then stop
		}
	}
}

// Forces
pub behavior fn this.PullTether(that, attractor, impulse, minDistance=0, maxDistance) {
	loop {
		await Tick

		let thatPos = that?.Pos
		if !thatPos { break }

		let attractorPos = attractor?.Pos
		if !attractorPos { break }

		let delta = attractorPos - thatPos
		let magnitude = ((Length(delta) - minDistance) / Max(0.0001, maxDistance - minDistance)).Mix(0.0, impulse)
		that.ApplyImpulse(magnitude * Direction(delta))
	}
}

pub behavior fn this.TowTether(that, attractor) {
	let thatPos = that?.Pos
	if !thatPos { break }

	let attractorPos = attractor?.Pos
	if !attractorPos { break }

	let maxDistance = Length(attractorPos - thatPos)

	loop {
		await Tick

		let thatPos = that?.Pos
		if !thatPos { break }

		let attractorPos = attractor?.Pos
		if !attractorPos { break }

		let delta = attractorPos - thatPos
		let distance = Length(delta)
		if distance < maxDistance { continue }

		let step = distance - maxDistance
		that.ApplyPositionStep(step * Direction(delta))
	}
}

pub behavior fn this.SwingTether(that, unit, turnProportion, momentumFactor=1) {
	loop {
		await Tick

		let thatPos = that?.Pos
		if !thatPos { break }

		let unitPos = unit?.Pos
		if !unitPos { break }

		let diff = thatPos - unitPos
		let initialAngle = Angle(diff)
		let turn = turnProportion * AngleDelta(initialAngle, unit.Heading)
		let target = unitPos + Direction(initialAngle + turn) * Length(diff)

		let step = target - thatPos
		if Length(step) <= CloseEnough { continue }

		let velocity = that.Velocity

		// Keep some part of the velocity that is orthogonal to the step.
		// This makes the swing build up and feel more natural.
		let orthogonal = RotateRight(Direction(step))
		velocity = (step * TicksPerSecond) + (Dot(velocity, orthogonal) * orthogonal * momentumFactor)
		
		that.ApplyTurningStep(turn)
		that.Velocity = velocity
	}
}