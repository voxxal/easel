pub prop incantation.ChargeProportion

pub await fn incantation.ChargeForDuration(chargeDuration) |use this = charger| {
	incantation.ChargeProportion = 0

	let chargingComplete = false
	await Subspawn charger {
		delve(charger)

		const start = Tick
		loop {
			const proportion = ((Tick - start) / chargeDuration).Min(1.0)
			incantation.ChargeProportion = proportion
			if proportion >= 1.0 { break }
			await Tick
		}

		chargingComplete = true
		Despawn
	}

	// The charger was interrupted before it could be completed. Do not cast the spell.
	// Probably the incantation is in the process of being expired but the charger gets expired first as it is a child.
	// Wait a bit longer and the incantation should expire before we can complete the spell.
	if !chargingComplete { await Tick }
}

pub await fn incantation.ChargeUntilReleased(chargeDuration, minProportion=1.0, [owner, keycode]) |use this = charger| {
	incantation.ChargeProportion = 0

	let chargingComplete = false
	await Subspawn charger {
		delve(charger)

		const start = Tick
		on Tick {
			const proportion = ((Tick - start) / chargeDuration).Min(1.0)
			incantation.ChargeProportion = proportion
			if proportion >= 1.0 { break }
		}

		// Wait until the user releases the button and the charge is at least the minimum proportion
		await owner.ButtonUp(keycode)
		while incantation.ChargeProportion < minProportion {
			await incantation.ChargeProportion
		}

		chargingComplete = true
		Despawn
	}

	// The charger was interrupted before it could be completed. Do not cast the spell.
	// Probably the incantation is in the process of being expired but the charger gets expired first as it is a child.
	// Wait a bit longer and the incantation should expire before we can complete the spell.
	if !chargingComplete { await Tick }
}

pub fn charger.StopCharging {
	charger.Expire
}

pub fn this.ChargingIndicator(
	radius=1.8, shadow=0.5,
	luminous=1, glare=0, glareAlpha=1, bloom=3.0, bloomAlpha=0.5,
	layer=Layer:Charger,
	[body, incantation, crater?, color, ownerColor?, owner?, flicker?]) {

	with incantation.ChargeProportion {
		PolygonSprite<chargingIndicator>(Circle(radius), noRotation=true, color=color.WithOpacity(ChargeProportion))
	}
}