.. thinkInterval=0.25s, timeJitter=3, wakeInterval=1s, spinPerTick=-0.05rev

symbol SpinAction

field unit.PreviousTarget
field unit.CurrentlyChannelling

field unit.HasAction
field unit.ActionUtility
field unit.ActionAbility
field unit.ActionDelay
field unit.ActionTarget
field unit.ActionSpin
field unit.ActionKeepChannelling

pub signal unit.BotChannelling(.. target, enemy, channelling)
pub signal unit.BotDeflecting(.. target, enemy)
pub signal unit.BotAttacking(.. target, enemy)
pub signal unit.BotRecovering(.. target, enemy)

pub fn owner.BotChooseSpells() {
	// Bots get random spells
	owner.RandomizeAllSlots

	// Uncomment the lines below if you want to choose specific spells for the bot
	// owner.DashSlot = WantSwap
	// owner.PrimarySlot = WantFireball
	// owner.SpecialSlot = WantHoming
	// owner.DefenseSlot = WantMeteor
	// owner.UltimateSlot = WantSpiritBomb
	// owner.MeleeSlot = WantEnergyMines
}

pub behavior fn unit.Bot(owner) {
	loop {
		const start = Tick
		const sleepAction = await BotThink

		const end = start + thinkInterval + Random() * timeJitter
		if sleepAction == SpinAction {
			while Tick < end {
				unit.Movement:Look(unit.Heading + spinPerTick)
				await TickStart
			}
		} else {
			await SleepUntilTickStart(end - Tick)
		}
	}
}
pub delete fn unit.Bot(owner) { }

fn unit.BotResetAction {
	unit.HasAction = false
	unit.ActionUtility = Utility:None
	unit.ActionAbility = null
	unit.ActionDelay = 0
	unit.ActionTarget = null
	unit.ActionSpin = false
	unit.ActionKeepChannelling = false
}

pub fn unit.BotUseAbility(target .. ability, utility=Utility:Medium, delay=0.25s, spin=false) {
	if utility > unit.ActionUtility {
		unit.HasAction = true
		unit.ActionUtility = utility
		unit.ActionAbility = ability
		unit.ActionDelay = delay
		unit.ActionTarget = target
		unit.ActionSpin = spin
		unit.ActionKeepChannelling = false
	}
}
pub fn unit.BotKeepChannelling(target .. ability, utility=Utility:High, delay=0.15s, spin=false) {
	if ability == unit.CurrentlyChannelling && utility > unit.ActionUtility {
		unit.HasAction = true
		unit.ActionUtility = utility
		unit.ActionAbility = null
		unit.ActionDelay = delay
		unit.ActionTarget = target
		unit.ActionSpin = spin
		unit.ActionKeepChannelling = true
	}
}
pub fn unit.BotMoveTo(target .. utility=Utility:Low, delay=0.15s) {
	if utility > unit.ActionUtility {
		unit.HasAction = true
		unit.ActionUtility = utility
		unit.ActionAbility = null
		unit.ActionDelay = delay
		unit.ActionTarget = target
		unit.ActionSpin = false
		unit.ActionKeepChannelling = true
	}
}
pub fn unit.BotSpin(.. utility=Utility:Minimum, delay=0s) {
	if utility > unit.ActionUtility {
		unit.HasAction = true
		unit.ActionUtility = utility
		unit.ActionAbility = null
		unit.ActionDelay = delay
		unit.ActionTarget = null
		unit.ActionSpin = true
		unit.ActionKeepChannelling = false
	}
}

await fn BotThink(.. unit, owner) {
	.. this = unit

	.. enemy = QueryUnits.WhereAlliance(unit,Alliance:Enemy).FindNearest(unit.Pos)
	if !enemy {
		if HasConcluded {
			// Has won the game - spin to celebrate!
			return SpinAction
		} else {
			return null
		}
	}

	.. target = enemy.Vanished ? unit.PreviousTarget : enemy?.Pos
	if !target { return }
	unit.PreviousTarget = target

	BotResetAction
	BotConsiderRecovery
	BotConsiderChannelling
	BotConsiderDodge
	BotConsiderAttack
	BotConsiderMove

	if unit.ActionDelay > 0 {
		await SleepUntilTickStart(unit.ActionDelay)
	}

	// Pointers are processed early in the tick (before physics) - ensure the bot is doing the same so all timings are correct
	if unit.ActionTarget && !unit.ActionSpin {
		owner.Pointer = unit.ActionTarget
		owner.IsPointerActive = true
	} else {
		owner.IsPointerActive = false
	}

	// User-invoked incantations occur during the main part of the tick - ensure the bot is doing the same so all timings are correct
	await Tick
	if unit.CurrentlyChannelling && !unit.ActionKeepChannelling {
		// Release if no command to keep channelling
		unit.CurrentlyChannelling.ReleaseCommand
		unit.CurrentlyChannelling = null
	}
	if unit.ActionAbility {
		unit.ActionAbility.InvokeCommand
		unit.CurrentlyChannelling = unit.ActionAbility

	}

	if unit.ActionSpin {
		return SpinAction
	}
}

fn BotConsiderMove(unit, target, enemy) {
	if unit.HasAction { return }

	// Walk away, but around the edge, not through the middle
	let selfAngle = Angle(unit.Pos) // Get angle from center of map
	let awayAngle = Angle(-target)
	let newAngle = selfAngle + 0.1 * AngleDelta(selfAngle, awayAngle)
	let radius = Length(target) // Match our enemy's radius

	BotMoveTo(target=radius * Direction(newAngle), utility=Utility:Minimum)
}

fn BotConsiderChannelling(unit, target, enemy) {
	if unit.HasAction { return }

	const channelling = unit.CurrentlyChannelling
	if !channelling { return }
	unit.BotChannelling(.. target enemy channelling)
}

fn BotFindIncoming(unit, tooFarRadius=2.0) {
	let projectile = QueryColliders.WhereCategory(Category:Projectile).WhereAlliance(unit,Alliance:Enemy).FindNearest(unit.Pos)
	if !projectile { return null }

	let incoming = projectile.Pos

	let diff = unit.Pos - incoming
	let incomingSpeed = Dot(projectile.Velocity, Direction(diff))
	if incomingSpeed <= 0 { return null } // Not coming towards us

	let timeToCollision = Length(diff) / incomingSpeed
	if timeToCollision <= 0 || timeToCollision > 0.5s { return null } // Not coming towards us or too far away

	let collisionPoint = projectile.Pos + projectile.Velocity * timeToCollision
	let distanceToCollision = Length(unit.Pos - collisionPoint)

	// Need to know the radius of the unit and projectile to do this accurately
	if distanceToCollision > tooFarRadius { return null } // Too far away

	return [incoming,collisionPoint]
}

fn BotConsiderDodge(unit, target, enemy, escapeRadius=10) {
	if unit.HasAction { return }

	let [incoming, predictedCollisionPoint] = BotFindIncoming
	if !incoming { return null }

	if HasCommenced {
		// Attempt to use a spell to deflect the incoming collision
		unit.BotDeflecting(.. target enemy)
		if unit.HasAction { return }
	}

	// If no action assigned yet, attempt to dodge the incoming collision
	let dodge = unit.Pos + escapeRadius * Direction(unit.Pos - predictedCollisionPoint)
	BotMoveTo(target=dodge, utility=Utility:Maximum)
}

fn BotConsiderAttack(unit, target, enemy) {
	if unit.HasAction || !HasCommenced { return }
	unit.BotAttacking(.. target enemy)
}

fn BotConsiderRecovery(unit, target, enemy) {
	if unit.HasAction || !HasCommenced | !unit.IsInLava { return }

	// Find a safe place
	let turf = QueryColliders.WhereCategory(Category:Turf).FindNearest(unit.Pos)
	let safePoint = turf?.Pos ?? @(0,0)

	// Recover to somewhere between our target and the center of the map. This stops everyone going to the absolute center all the time which sometimes has dangerous obstacles
	.. target = (target + safePoint) / 2.0

	// Attempt to use a spell to recover
	BotRecovering(.. target enemy)
	if unit.HasAction { return }

	// If no spell available, run back to the middle as quickly as possible
	BotMoveTo(target=, utility=Utility:Maximum)
}