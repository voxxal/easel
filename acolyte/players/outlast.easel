field team.TeamEliminatedTick

pub fn Outlast:IsGameComplete {
	if !HasCommenced { return false }

	let firstTeam = null
	for player in QueryPlayers.FindAll {
		if player.IsEliminated { continue } // Ignore defeated players

		// Consider only the undefeated players
		if firstTeam {
			if player.Team != firstTeam {
				// At least two teams remain - game not complete
				return false
			}
		} else {
			firstTeam = player.Team
		}
	}

	// At most one team exists - game complete
	return true
}

pub fn Outlast:CalculateRanking {
	let undefeated = Tick + 1 // If undefeated, use a future tick as a sentinel value
	for player in QueryPlayers.FindAll {
		let eliminatedTick = player.EliminatedTick ?? undefeated 
		let team = player.Team
		team.TeamEliminatedTick = Max(team.TeamEliminatedTick ?? 0, eliminatedTick)
	}

	let rankings = QueryPlayers.FindAll.OrderByDesc(
		player => [player.Team.TeamEliminatedTick ?? undefeated, player.EliminatedTick ?? undefeated]
	)

	return rankings
}