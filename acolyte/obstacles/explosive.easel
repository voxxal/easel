use owner = null

pub fn obstacle.Explosive(maxHp=50.0, pos=@(0,0), heading=0, impulse=350, radius=0.267, aoe=4.0, [posOffset?, headingOffset?]) {
    use body=obstacle, life=obstacle
	use dissipate=30,
	use color=#fc0, fade=#f00,
	use bloom=0, luminous=0,
	use shading=0.25, layer=Layer:Obstacle,

	Body(pos = pos + posOffset, heading = heading + headingOffset, bullet=true)
	Durability = Durability:Maximum
	DecaySpeed
	DecayTurnRate(turningDecay=0.05)

	Health
	LavaBehavior
	on Hurt {
		Strobe(dissipate=10, shine=0.25, growth=0.2)
	}

	Anchored
	once AfterGameCommenced { delete Anchored }

	// Circular collider to make it more predictable where it will go when hit,
	// but triangular avatar to give it a distinctive shape
	PolygonCollider(
        Circle,
        category = Category:Obstacle | Category:Grabbable | Category:Aoe,
        collideWith=Category:Tangible, sense=Category:Zone,
        density=10, restitution=0,
    )

	with Hp {
		await Paint // coalesce multiple changes to HP into a single paint at the end of tick
		use color = HpProportion.Mix(fade, color)
		PolygonSprite(Equilateral(numPoints=3), shadow=0.5)
	}

	on BeforeCollide that {
		if GameCommenced && that.Category.Overlaps(Category:Unit) {
			repeat 10 { Spark(speed=26, splatter=1, luminous=1, feather=1, shine=0.5) }
			Spark(radius=aoe, bloom=3, bloomAlpha=0.5, feather=1, glare=0.3, shine=0.2)
			Hear(@explosive.esfx)

			for that in QueryWithinRadius(aoe, filter=Category:Aoe) {
				ImpulseAwayAttenuated(that, attenuate=0.4)
				ExpireIfDestructible(that)
				that.Interrupt
			}

			Expire
			break
		}
	}

	once BeforeOutOfHealth {
		repeat 3 { Spark(feather=1, shine=1, luminous=1, speed=12, splatter=1) }
	}
}