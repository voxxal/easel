use glyph=@waveStrike.svg, color=#6600ff, damage=0, cooldown=7.5s, lifetime=1s, length=7.0

pub symbol WantSaber

pub fn SaberDescription([ui]) {
    H1 { "Lightsaber" }

    P {
        "Wield a formidable saber forged from pure light. Its incandescent blade can expertly parry incoming projectiles and forcefully knock back your enemies with each swift and decisive strike. "
    }

    Blank(expand=true)

    SlotStats {
        SlotStat("Cooldown", icon="fas fa-clock") { %((cooldown / TicksPerSecond) + "s") }
    }
}

pub fn SaberOption([ui]) {
	SlotOption(WantSaber) {
        SaberDescription
	}
}

pub fn ability.SaberAbility([unit, owner, keycode, btnEdit?, btnOrder?, btnSize?]) {
    use body=unit, life=unit

	on BotAttacking target {
		if Cooldown == 0 && Distance(target, unit.Pos) <= length {
			BotUseAbility
		}
	}

    AbilityCommandBtn {
        SaberDescription
    }

	SpawnEachIncantation incantation {
        UngrabMe
        UngrabThem

		on Interrupt interruptor {
			if interruptor.Overlaps(Interruptor:Self) {
				incantation.Expire
			}
		}

		on BotChannelling target {
			if Distance(target, unit.Pos) <= length {
				BotKeepChannelling(spin=true)
			}
		}

		Subspawn saber {
			use parent=unit, body=saber
			use dissipate=10, luminous=1
			use radius=0.25
			use restitution=1
			use category=Category:Shield
			use layer=Layer:Saber
			use fade=1, shadow=0.25, luminous=1, glare=1, glareAlpha=1, bloom=4, bloomAlpha=1
			use shape = Capsule(extent=length/2, pos=@(extent, 0))

			Durability = Durability:Reflector
			Movement:SynchronizedBody(unit, bullet=true)
			Sing(@saber.esfx)
			SpeedModifier(0.75)
			TurnRateModifier(0.05)

			// Main saber collider is actually attached to the unit's body, which means it will transmit forces back onto the unit (e.g. recoil)
			PolygonCollider(body=unit, collideWith=Category:Unit, density=1.25)

			// Deflector is attached to the saber's independent body so projectiles cannot knock the unit back through the saber
			PolygonCollider<deflector>(collideWith=Category:Projectile, density=5.0, isolate=true)

			// Sprite is attached to the unit (not the independent deflector body) so it does not visually lag behind
			PolygonSprite(body=unit, shadow=)
			
			on Paint {
				Swoop(body=unit, length=, layer=Layer:Bloom)
			}

			on Hurt {
				Strobe(dissipate=10, shine=1.0)
			}

			on BeforeCollide that { // Main collider hits units
				Hear(@saberHit.esfx)

				if that.Team != owner.Team {
					Attack(that)

					that.Tombstone victim {
						PlayerNameDisplay(owner)
						" slashed "
						PlayerNameDisplay(victim)
						" into bite-sized pieces "
					}

					await Tick(0.25s)
					incantation.Expire
				}
			}

			on BeforeCollide<deflector> that { // Secondary collider hits projectiles only
				Hear(@saberHit.esfx)
				if that.Category.Overlaps(Category:Destructible) { that.Expire }
			}
		}

		await Tick(lifetime)
	}
}