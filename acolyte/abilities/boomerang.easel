use glyph=@crackedBallDunk.svg, color=#00ffff, damage=20.0, lifesteal=0.3, cooldown=2s, thirdPlusStrikePenalty=0.5

pub symbol WantBoomerang

pub fn BoomerangDescription([ui]) {
    H1 { "Boomerang" }

    P {
        "Send forth a projectile that slices through the air before returning to your hand. With the potential to strike enemies twice, Boomerang becomes a fearsome weapon in the hands of a skilled wielder."
    }

    Blank(expand=true)

    SlotStats {
        SlotStat("Damage", icon="fas fa-heart-crack") { %(damage) }
        SlotStat("Lifesteal", icon="fas fa-circle-plus") { %((lifesteal * 100.0) + "%") }
        SlotStat("Cooldown", icon="fas fa-clock") { %((cooldown / TicksPerSecond) + "s") }
    }
}

pub fn BoomerangOption([ui]) {
	SlotOption(WantBoomerang) {
        BoomerangDescription
	}
}

pub fn ability.BoomerangAbility([unit, owner, keycode, btnEdit?, btnOrder?, btnSize?]) {
    use body=unit, life=unit

	on BotAttacking target {
		if Cooldown == 0 {
			BotUseAbility
		}
	}

    AbilityCommandBtn {
        BoomerangDescription
    }

	SpawnEachIncantation incantation {
		use damage = damage * unit.DamageModifier

		Spawn projectile {
			use parent=unit, body=projectile
			use lifetime=2s, dissipate=25
			use radius=0.16, speed=53.0
			use ownerColor=true, luminous=1, layer=Layer:Projectile
			use noLavasteal=true // Not enough knockback to push others into lava

			Body(pos=parent.Pos, heading=parent.Heading, velocity=speed*Direction(heading), bullet=true)
			Durability = Durability:High
			DecayTurnRate
			Sing(@boomerang.esfx)
			ExpireAfterLifetime

			once Tick(33) {
				Velocity:RedirectTowards(unit.Pos, speed=)
				RecoverSpeed
				Homing(unit, turnRate=0.05rev)
			}

			PolygonCollider(
                Circle, density=1,
                category = Category:Projectile,
                sense = Category:Unit | Category:Projectile,
                collideWith = Category:Shield | Category:Obstacle,
			)

			on Paint {
				Streak(fade=0.5, bloom=3, bloomAlpha=1, glare=1, shadow=0.25)
			}

			on BeforeCollide that {
				if that == unit {
					// The boomerang has returned, time to expire
					Expire
				}

				if that.Team != owner.Team {
					if that.Category.Overlaps(Category:Unit) {
						Strobe(growth=2, shine=1.0)
						that.StackEffect<boomerang>(cleansable=true) stacks {
							use body = that
							DespawnBefore(projectile)
							Attack(that, damage = damage * CalculateBoomerangBonus(stacks))
							Hear(@boomerangHit.esfx)

							with that.Vanished {
							    if that.Vanished {
							        delete PolygonSprite<boomerang>
							    } else {
                                    PolygonSprite<boomerang>(shape=Circle(0), audience=owner, bloom=4, bloomAlpha=0.5, layer=Layer:Bloom)
                                }
							}

							that.Tombstone victim {
								PlayerNameDisplay(owner)
								" sliced "
								if stacks > 0 {
									"and diced "
								}
								PlayerNameDisplay(victim)
							}
						}
					} else {
						Attack(that)
					}
				}

				if that.Category.Overlaps(Category:Projectile) && that.Durability >= this.Durability {
					Strobe(growth=2, shine=1.0)
					Expire
				}
			}
		}
	}
}

fn CalculateBoomerangBonus(stacks) -> proportion {
    if stacks <= 1 {
        return 1
    } else {
        return (1 - thirdPlusStrikePenalty) ** (stacks - 1)
    }
}