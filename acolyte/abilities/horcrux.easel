use glyph=@burningEye.svg, color=#22ee88, damage=30.0, duration=1.0s, lifesteal=1.0, cooldown=7.5s

pub symbol WantHorcrux

pub fn HorcruxDescription([ui]) {
    H1 { "Horcrux" }

    P {
        "Secure your existence on this mortal plane with this enigmatic relic which safeguards you from death. This fragile object also draws life from nearby foes but never kills them. Be cautious when placing your Horcrux as even the slightest touch of your enemy will shatter it, leaving you at the whims of fate."
    }

    SlotEffect("Unkillable", icon="fas fa-skull") {
        "As long as your Horcrux is alive, you cannot die."
    }

    Blank(expand=true)

    SlotStats {
        SlotStat("Damage", icon="fas fa-heart-crack") { %(damage) }
        SlotStat("Lifesteal", icon="fas fa-circle-plus") { %((lifesteal * 100.0) + "%") }
        SlotStat("Cooldown", icon="fas fa-clock") { %((cooldown / TicksPerSecond) + "s") }
    }
}

pub fn HorcruxOption([ui]) {
	SlotOption(WantHorcrux) {
        HorcruxDescription
	}
}

pub fn ability.HorcruxAbility([unit, owner, keycode, btnEdit?, btnOrder?, btnSize?]) {
    use body=unit, life=unit

	on BotAttacking target {
		if Cooldown == 0 {
			BotUseAbility(utility=Utility:Low)
		}
	}

    AbilityCommandBtn {
        HorcruxDescription
    }

	SpawnEachIncantation incantation {
		use damage = damage * unit.DamageModifier

		Spawn projectile {
			use parent=unit, body=projectile
			use lifetime=3s, dissipate=15
			use interval=6, damagePerInterval = interval * damage / duration, maxHits = damage / damagePerInterval
			use radius=0.28, aoe=3.2, speed=28
			use luminous=1, layer=Layer:Projectile
			use category=Category:Projectile | Category:Destructible | Category:Aoe
            use density=1, restitution=1
			use noLavasteal=true // Not enough knockback to push others into lava
			use turningDecay=0 // Keep spinning

			const birth = Tick

			Body(pos=parent.Pos, heading=parent.Heading, velocity=speed*Direction(heading), turnRate=0.2rev, bullet=true)
			Durability = Durability:Low
			RecoverSpeed
			LimitSpeed(50)
			DecayTurnRate
			Unkillable(true)
			CooldownRate(0)
			PolygonSprite(shape=Circle(aoe), color=color.Fade(0.95), crater=0.85, layer=Layer:Indicator)
			Sing(@horcrux.esfx)
			ExpireAfterLifetime

			with unit.Vanished {
				if unit.Vanished {
					delete Strand<lifeline>
				} else {
					Strand<lifeline>(unit, projectile, color=#fff2, radius=0.1, taper=0.5, fade=0.25, dissipate=5, bloom=2, bloomAlpha=1, glare=1, shadow=0.25)
				}
			}

			with Tick {
				const cycle=13, proportion = ((Tick - birth) % cycle) / cycle

				PolygonSprite(
					Circle(radius=aoe * proportion),
					crater=0.8, feather=0.3, bloom=1.5, shine=0.1,
					color=color.Fade(0.95).Fade(proportion))
			}

			PolygonSprite(
				Equilateral(numPoints=5, radius=2.0 * radius),
				bloom=4, bloomAlpha=0.5, luminous=1, shadow=0.25)
			
			on Paint {
				Spark(splatter=0.3, feather=1, shine=0.5, speed=6, dissipate=10)
			}

			on AfterCollide that {
				if that.Category.Overlaps(Category:Unit) && that.Durability >= this.Durability {
					Strobe(growth=0.5, shine=1.0)
					repeat 10 { Spark(splatter=1, feather=1, shine=0.5) }
					Expire
				}
			}

			PolygonCollider(
                Circle,
                collideWith = Category:Tangible ^ Category:Projectile,
            ) // No collisions with projectiles while deploying
			once Tick(Min(lifetime, Velocity:TicksTo(Pointer))) {
				Speed = 0
				DecaySpeed
				PolygonCollider(
                    Circle,
                    collideWith = Category:Tangible,
                ) // Restore collisions with projectiles after deployment
			}

			with Tick(interval) {
				use damage = damage * interval / TicksPerSecond

				for that in QueryWithinRadius(aoe, filter=Category:Unit) {
					if that.Team != owner.Team && TakeHitIfWithinLimit(that) {
						Attack(that, damage=damagePerInterval, noHurt=true, noInterrupt=true, minHealth=1)
						Spark(body=that,
							radius=1.0, layer=Layer:Spark,
							color=color.Fade(0.7),
							feather=1, shine=0.5, glaze=1, speed=12)

						that.Tombstone victim {
							PlayerNameDisplay(owner)
							" stole "
							PlayerNameDisplay(victim)
							"'s soul"
						}
					}
				}
			}
		}
	}
}