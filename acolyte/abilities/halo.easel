use glyph=@angelOutfit.svg, color=#ffaa00, damage=6, lifesteal=1.0, lifetime=3s, cooldown=7.5s, numHalos=3, fastProportion=0.2

pub symbol WantHalo

pub signal unit.ClearHalos

pub fn HaloDescription([ui]) {
    H1 { "Halo" }

    P {
        "Manifest " + numHalos + " resplendent swirls of radiant energy, burning your enemies with holy light and stealing a fragment of their soul with each hit."
    }

    SlotEffect("Interruptible", icon="fas fa-hand-paper") {
        "Any strike from your enemies compromises your steadfast devotion and will bring your divine brilliance to an end."
    }
    SlotEffect("Rapid Gracefulness", icon="fas fa-running") {
        "Move " + (fastProportion * 100) + "% faster as your every step shimmers with the favor of the gods."
    }

    Blank(expand=true)

    SlotStats {
        SlotStat("Damage", icon="fas fa-heart-crack") { %(damage) }
        SlotStat("Lifesteal", icon="fas fa-circle-plus") { %((lifesteal * 100.0) + "%") }
        SlotStat("Cooldown", icon="fas fa-clock") { %((cooldown / TicksPerSecond) + "s") }
    }
}

pub fn HaloOption([ui]) {
	SlotOption(WantHalo) {
        HaloDescription
	}
}

pub fn ability.HaloAbility([unit, owner, keycode, btnEdit?, btnOrder?, btnSize?]) {
    use body=unit, life=unit

	on BotAttacking target {
		const triggerDistance = 5
		if Cooldown == 0 && Distance(unit.Pos, target) <= triggerDistance {
			BotUseAbility
		}
	}

    AbilityCommandBtn {
        HaloDescription
    }

	SpawnEachIncantation incantation {
	    unit.Subspawn {
            // Spawn a separate lifespan so halos can keep spawning while the player is casting another spell.
            // The player can only be casting one incantation at a time.
            // Spawning a separate lifespan means we separate ourselves from that restriction.

            use damage = damage * unit.DamageModifier

            const beginning = Tick

            CooldownRate(0)
            SpeedModifier(1 + fastProportion)

            on BotChannelling target {
                const chaseDistance=10
                if Distance(unit.Pos, target) <= chaseDistance {
                    BotKeepChannelling
                }
            }

            on Interrupt interruptor {
                if interruptor.Overlaps(Interruptor:NotSelf) {
                    incantation.Expire
                }
            }

            once ClearHalos {
                Expire
            }

            await Barrage(interval=0.8s, count=numHalos) index {
                Subspawn projectile {
                    use parent=unit, body=projectile
                    use dissipate=15
                    use radius=0.1, speed=40.0
                    use luminous=1, layer=Layer:Projectile
                    use noLavasteal=true // Not enough knockback to push others into lava

                    Body(pos=parent.Pos, heading=parent.Heading, velocity=speed*Direction(heading), bullet=true)
                    Durability = Durability:Minimum
                    RecoverSpeed
                    DecayTurnRate
                    Movement:WalkWith(unit)
                    Homing(unit, turnProportion=0.2)
                    Sing(@halo.esfx)

                    // Enemy hits will destroy our halos
                    on Interrupt interruptor {
                        if interruptor.Overlaps(Interruptor:NotSelf) {
                            Expire
                        }
                    }

                    PolygonCollider(
                        Circle,
                        category=Category:Projectile | Category:Aoe | Category:Destructible,
                        collideWith = Category:Unit | Category:Shield | Category:Obstacle,
                        density=1, restitution=1,
                    )

                    on Paint {
                        Streak(bloom=2, bloomAlpha=1, glare=1, shadow=0.25, fade=1, taper=0)
                    }

                    on BeforeCollide that {
                        if that.Team != owner.Team {
                            Attack(that)
                            Strobe(growth=1.0)
                            Hear(@haloHit.esfx)

                            that.Tombstone victim {
                                PlayerNameDisplay(owner)
                                " enlightened "
                                PlayerNameDisplay(victim)
                                " in a blazing spectacle"
                            }
                        }
                    }
                }
            }
            await Tick(lifetime) // lifetime for halo only begins once all halos have been spawned
            Despawn
        }
	}
}