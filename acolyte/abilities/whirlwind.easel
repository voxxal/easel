use glyph=@snowflake1.svg, color=#44ffff, cooldown=7.5s, slowProportion=0.5, buffDuration=2.0s

pub symbol WantWhirlwind

pub fn WhirlwindDescription([ui]) {
    H1 { "Whirlwind" }

    P {
        "Summon a bone-chilling vortex that engulfs your enemies, impeding their movements with its icy grip while blowing away incoming attacks with the might of the winds."
    }

    SlotEffect("Chilling Blow", icon="fas fa-snowflake") {
        "Enemies caught in your whirlwind will be slowed " + (slowProportion * 100) + "% for " + (buffDuration / TicksPerSecond) + " seconds."
    }

    Blank(expand=true)

    SlotStats {
        SlotStat("Cooldown", icon="fas fa-clock") { %((cooldown / TicksPerSecond) + "s") }
    }
}

pub fn WhirlwindOption([ui]) {
	SlotOption(WantWhirlwind) {
        WhirlwindDescription
	}
}

pub fn ability.WhirlwindAbility([unit, owner, keycode, btnEdit?, btnOrder?, btnSize?]) {
    use body=unit, life=unit

	on BotAttacking target {
		if Cooldown == 0 {
			BotUseAbility
		}
	}

    AbilityCommandBtn {
        WhirlwindDescription
    }

	SpawnEachIncantation incantation {
		TurnRateModifier(0)

		await ChargeForDuration(6) {
		}

		Spawn projectile {
			use parent=unit, body=projectile
			use lifetime=2s, dissipate=20
			use radius=2.4, speed=12.0
			use luminous=0, glare=0.7, glareAlpha=0.4, bloom=0, feather=0.5, layer=Layer:Projectile

			ExpireAfterLifetime
			Body(pos=parent.Pos, heading=parent.Heading, velocity=speed*Direction(heading))
			RecoverSpeed
			DecayTurnRate
			Sing(@whirlwind.esfx)
			PolygonSprite(shape=Circle(0), bloom=4, bloomAlpha=0.5, luminous=0.5, layer=Layer:Bloom)

			PolygonCollider(
                Circle,
                category=Category:Projectile, collideWith=Category:None, sense=Category:Unit,
            )
			
			on Paint {
				const numSparks = 2
				for i in Range(0, numSparks) {
					Spark(
						radius=1.2, splatter=1.3, shine=0.5,
						color=#4ff4, fade=1,
						screenOffset=SwirlOffset(radius=0.8, period=13, phase=i/numSparks))
				}
			}

			on BeforeCollide that {
				if that.Category.Overlaps(Category:Unit) && that.Team != owner.Team {
					// spawn buff with separate lifetime from projectile
					that.ReplaceEffect<cold>(cleansable=true) {
						use body = that

						ExpireAfterLifetime(lifetime=buffDuration)
						give that.SpeedModifier(1 - slowProportion)

                        on Paint {
                            if that.Invisibility {
                                await that.Invisibility
                            } else {
                                Spark(
                                    color=#4ff4, fade=1, shine=0.5,
                                    radius=1.0, dissipate=20, layer=Layer:Spark,
                                    glaze=1)
                            }
                        }

						that.Tombstone victim {
							PlayerNameDisplay(owner)
							" took "
							PlayerNameDisplay(victim)
							"'s breath away"
						}
					}

					Strobe(shine=1.0, growth=0.1)
				}
			}

			Wind(0.3)
		}
	}
}