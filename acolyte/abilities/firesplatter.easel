use glyph=@bubblingBeam.svg, color=#ff0044
use damage=40.0, lifesteal=0.3, cooldown=5.0s
use lifetime=12, speed=40.0, attackDistance=lifetime * speed / TicksPerSecond

pub symbol WantFiresplatter

pub fn FiresplatterDescription([ui]) {
    H1 { "Firesplatter" }

    P {
        "Unleash a sweeping arc of flames, scorching nearby foes while also incinerating incoming attacks with its all-consuming blaze."
    }

    Blank(expand=true)

    SlotStats {
        SlotStat("Damage", icon="fas fa-heart-crack") { %(damage) }
        SlotStat("Lifesteal", icon="fas fa-circle-plus") { %((lifesteal * 100.0) + "%") }
        SlotStat("Cooldown", icon="fas fa-clock") { %((cooldown / TicksPerSecond) + "s") }
    }
}

pub fn FiresplatterOption([ui]) {
	SlotOption(WantFiresplatter) {
        FiresplatterDescription
	}
}

pub fn ability.FiresplatterAbility([unit, owner, keycode, btnEdit?, btnOrder?, btnSize?]) {
    use body=unit, life=unit

	on BotAttacking target {
		if Cooldown == 0 && Distance(unit.Pos, target) <= attackDistance {
			BotUseAbility
		}
	}

    AbilityCommandBtn {
        FiresplatterDescription
    }

	SpawnEachIncantation incantation {
		use damage = damage * unit.DamageModifier

		TurnRateModifier(0)
		SpeedModifier(0.5)

		Sing(@firesplatter.esfx)
		await Spray(duration=20, count=10, spray=0.135revs) headingOffset {
			use damage = damage / count

			Spawn projectile {
				use parent=unit, body=projectile
				use dissipate=12, radius=0.32
				use luminous=1, layer=Layer:Projectile

				Body(pos=parent.Pos, heading=parent.Heading+headingOffset, velocity=speed*Direction(heading), bullet=true)
				Durability = Durability:High
                RecoverSpeed
                DecayTurnRate
				ExpireAfterLifetime

				PolygonCollider(
                    Circle,
                    category=Category:Projectile,
                    density=0.5, restitution=1,
                )

				on Paint {
					Streak(dissipate=7, bloom=3, bloomAlpha=1, glare=1, shadow=0.25)
					Spark(dissipate=30, feather=1, shine=0.5, splatter=0.3)
				}

				on BeforeCollide that {
					if CanHurtSelf || that.Team != owner.Team {
						Attack(that)

						that.Tombstone victim {
							PlayerNameDisplay(owner)
							" burned "
							PlayerNameDisplay(victim)
							" to a crisp"
						}
					}
				}
				on AfterCollide that {
					if that.Category.Overlaps(Category:Shield) && that.Team != owner.Team {
						CanHurtSelf = true // Can bounce off shield to hurt self
					}
					if that.Durability >= this.Durability {
						Strobe(shine=0.5, growth=0.25)
						Spark(splatter=1, feather=1, shine=0.5)
						Expire
					}
				}
			}
		}
	}
}