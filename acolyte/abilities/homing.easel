.. glyph=BoltSaw:Glyph, color=#44ffcc, damage=16, lifesteal=0.3, cooldown=9.0s

pub symbol WantHoming

prop projectile.Repossessor

pub fn HomingOption(.. ui) {
	SlotOption<WantHoming> {
		H1 { %("Homing") }

		P {
			%("Summon a tenacious, enchanted sphere that ceaselessly pursues your enemy. While they are preoccupied, seize the opportunity to unleash a barrage of your most potent abilities upon them.")
		}

		P {
			SlotEffect("Ceaseless Pursuit", icon="fas fa-crosshairs") {
				%("Homing seeks the enemy that was nearest to your cursor when launched.")
			}
		}

		SlotStats {
			SlotStat("Damage", icon="fas fa-sword") { %(damage) }
			SlotStat("Lifesteal", icon="fas fa-heart") { %((lifesteal * 100.0) + "%") }
			SlotStat("Cooldown", icon="fas fa-clock") { %((cooldown / TicksPerSecond) + "s") }
		}
	}
}

pub fn ability.HomingAbility(unit, owner, btn) {
	on BotAttacking {
		if Cooldown == 0 {
			BotUseAbility(utility=Utility:High)
		}
	}

	Incantation {
		.. damage = damage * unit.DamageModifier

		Spawn projectile {
			.. parent=unit
			.. lifetime=3.5s, dissipation=30, ownerColor=Alliance:Self
			.. radius=0.24, speed=12, alignHeadingToVelocity=true
			.. density=35, ccd=true
			.. luminous=1.0, depth=Depth:Projectile
			.. categories=Category:Projectile | Category:Aoe, durability=Durability:High

			LaunchBody
			PrepareForCollision
			PropulsiveMotion
			ExpireAfterLifetime
			Sing(Homing:Sound)

			Sprite {
				Collider {
					Shape:Circle
				}
			}

			hook Repossessor {
				.. owner = Repossessor ?? owner
				RayEmitter<helix1>(radius, fade=0, flutter=Flutter:Helix(radius * 0.5, period=18))
				RayEmitter<helix2>(radius * 0.5, fade=1, flutter=Flutter:Helix(radius * 2.0, period=18, angleOffset=0.4rev), bloom=0, glare=0)
				Homing(QueryUnits.WhereAlliance(owner, Alliance:Enemy).FindNearest(Pointer), turnProportion=0.05)
			}

			let canHurtSelf = false
			on BeforeCollide that {
				if canHurtSelf || owner.Team != that.Team {
					Attack(that)

					if that.Category & Category:Shield {
						canHurtSelf = true // Can bounce off shield to hurt self
						this.Repossessor = that.Owner // Change the owner
					}

					that.Tombstone victim {
						NameBlock(owner)
						%("'s endless pursuit ended ")
						NameBlock(victim)
					}
				}
			}
			on AfterCollide that {
				if that.Durability >= this.Durability {
					Strobe(growth=0.25, shine=1.0)
					Puff(count=10, splatter=1)
					Expire
				}
			}
		}
	}
}

sound Homing:Sound(duration=5s, cutoff=0.5s) {
	BrownNoise
	HighPass(freq=1800)
	LowPass(freq=1803)
	Gain(volume=0.25)
	Output(into=$final)

	Oscillator(freq=800, harmonics=[1,1.5])
	LowPass(freq=200)
	Tremolo(volumeModulation=0.4) {
		Oscillator(freq=6.67)
	}
	Output(into=$final)

	Input(key=$final)
	Envelope(attack=0.5s, sustain=0s)
}