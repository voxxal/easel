.. glyph=FragmentedMeteor:Glyph, color=#ff0066, damage=0, cooldown=6.5s

pub symbol WantMeteorite

signal projectile.MeteoriteSplit

pub fn MeteoriteOption(.. ui) {
	SlotOption<WantMeteorite> {
		H1 { %("Meteorite") }

		P {
			%("Summon a meteorite that hurtles towards your foes with unstoppable momentum. Upon encountering enemy spells, this indomitable force splits in two and continues its relentless advance.")
		}

		SlotStats {
			SlotStat("Damage", icon="fas fa-sword") { %(damage) }
			SlotStat("Cooldown", icon="fas fa-clock") { %((cooldown / TicksPerSecond) + "s") }
		}
	}
}

pub fn ability.MeteoriteAbility(unit, owner, btn) {
	on BotDeflecting {
		if Cooldown == 0 {
			BotUseAbility
		}
	}

	Incantation {
		Spawn projectile {
			.. parent=unit
			.. lifetime=2.0s, dissipation=12
			.. radius=1.44, speed=24.0, propulsion=0.2
			.. feather=0, bloom=0, shine=0, glare=0, luminous=0.0
			.. fade=#803, depth=Depth:Projectile+10
			.. density=100, restitution=0, ccd=true
			.. categories = Category:Projectile | Category:CanGrab | Category:Aoe | Category:Massive, durability=Durability:Maximum
			.. collideWith = Category:Solid ^ Category:Shield

			LaunchBody
			PrepareForCollision
			PropulsiveMotion
			Smoke(splatter=0.5, shadow=0.5)
			Hear(Meteorite:LaunchSound)
			Sing(Meteorite:Sound)
			ExpireAfterLifetime

			// we're only using the avatar for the bloom
			// depth+1 to place avatar behind the particles - the bloom will surround them
			Sprite(bloom=3, depth=depth+1) {
				// passthroughSiblings=false so the Grapple can immediately collide with a sibling like a Meteor even when it is spawned inside of the Meteor
				Collider(passthroughSiblings=false) {
					Shape:Circle
				}
			}

			on Hurt {
				Strobe(shine=1.0)
			}

			on BeforeCollide that {
				if that.Team != owner.Team {
					Attack(that)

					that.Tombstone victim {
						NameBlock(owner)
						%(" nudged ")
						NameBlock(victim)
						%(" to their bitter end ")
					}

				}

				// Specifically don't split on grabbers (e.g. Grapple) so they can ride the Meteorite
				if !(that.Category & Category:Grabber) {
					MeteoriteSplit
				}
			}

			// Wait for the meteorite to split before proceeding
			await MeteoriteSplit

			await Spray(duration=0, count=2, spray=0.02revs) {
				.. parent=projectile // set the parent to projectile before we overwrite projectile with a new spawn
				Spawn projectile {
					.. lifetime=1.0s, radius=0.5*radius

					LaunchBody
					PrepareForCollision
					PropulsiveMotion
					Smoke(splatter=0.5, shadow=0.5)
					Sing(Meteorite:SubprojectileSound)
					ExpireAfterLifetime

					// we're only using the avatar for the bloom
					// depth+1 to place avatar behind the particles - the bloom will surround them
					Sprite(bloom=3, depth=depth+1) {
						Collider {
							Shape:Circle
						}
					}

					on Hurt {
						Strobe(shine=1.0)
					}

					on AfterCollide that {
						if that.Team != owner.Team {
							Attack(that)

							that.Tombstone victim {
								NameBlock(owner)
								%(" gently nudged ")
								NameBlock(victim)
								%(" to their bitter end")
							}
						}
					}
				}
			}

			Expire
		}
	}
}

sound Meteorite:LaunchSound(duration=0.33s) {
	Oscillator(wave=$square, freq=[20,1], harmonics=[1, 2, 3, 4, 5, 6, 7, 8])
	HighPass(freq=150)
	LowPass(freq=300)
	Envelope(attack=0.1s, sustain=0s)
}

sound Meteorite:Sound(duration=2s, cutoff=0.25s) {
	Oscillator(wave=$square, freq=[1,10], harmonics=[1, 1.5, 2, 2.1, 2.16, 3.5, 6.7, 8.2])
	HighPass(freq=150)
	LowPass(freq=200)
	Envelope(attack=0.16s, sustain=0.5s)
}

sound Meteorite:SubprojectileSound(duration=2s, cutoff=0.25s) {
	Oscillator(wave=$square, freq=[1,10], harmonics=[1, 1.5, 2, 2.1, 2.16, 3.5, 6.7, 8.2])
	HighPass(freq=225)
	LowPass(freq=300)
	Envelope(attack=0.16s, sustain=0.5s)
}