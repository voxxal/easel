use glyph=@fragmentedMeteor.svg, color=#ff0066, damage=0, cooldown=6.5s

pub symbol WantMeteorite

signal projectile.MeteoriteSplit

pub fn MeteoriteDescription([ui]) {
    H1 { "Meteorite" }

    P {
        "Summon a meteorite that hurtles towards your foes with unstoppable momentum. Upon encountering enemy spells, this indomitable force splits in two and continues its relentless advance."
    }

    Blank(expand=true)

    SlotStats {
        SlotStat("Damage", icon="fas fa-heart-crack") { %(damage) }
        SlotStat("Cooldown", icon="fas fa-clock") { %((cooldown / TicksPerSecond) + "s") }
    }
}

pub fn MeteoriteOption([ui]) {
	SlotOption(WantMeteorite) {
        MeteoriteDescription
	}
}

pub fn ability.MeteoriteAbility([unit, owner, keycode, btnEdit?, btnOrder?, btnSize?]) {
    use body=unit, life=unit

	on BotDeflecting target {
		if Cooldown == 0 {
			BotUseAbility
		}
	}

    AbilityCommandBtn {
        MeteoriteDescription
    }

	SpawnEachIncantation incantation {
		Spawn projectile {
			use parent=unit, body=projectile
			use lifetime=2.0s, dissipate=12
			use radius=1.44, speed=24, propulsion=0.2
			use feather=0, bloom=0, shine=0, glare=0, luminous=0
			use fade=#803, layer=Layer:Projectile
			use category = Category:Projectile | Category:Grabbable | Category:Aoe | Category:Disintegrator
			use collideWith = Category:Tangible ^ Category:Shield
			use density=140, restitution=0

			Body(pos=parent.Pos, heading=parent.Heading, velocity=speed*Direction(heading), bullet=true)
			Durability = Durability:Maximum
			RecoverSpeed
			DecayTurnRate
			Hear(@meteoriteLaunch.esfx)
			Sing(@meteorite.esfx)
			ExpireAfterLifetime

			// passthroughSiblings=false so the Grapple can immediately collide with a sibling like a Meteor even when it is spawned inside of the Meteor
			PolygonCollider(Circle, passthroughSiblings=false)
			
			on Paint {
				Spark(splatter=0.5, shadow=0.5)
			}

			on Hurt {
				Strobe(shine=1)
			}

			on BeforeCollide that {
				if that.Team != owner.Team {
					Attack(that)

					that.Tombstone victim {
						PlayerNameDisplay(owner)
						" nudged "
						PlayerNameDisplay(victim)
						" to their bitter end "
					}

				}

				// Specifically don't split on grapple so players can ride the Meteorite
				if !that.Category.Overlaps(Category:Grapple) {
					MeteoriteSplit
				}
			}

			// Wait for the meteorite to split before proceeding
			await MeteoriteSplit

			await Spray(duration=0, count=2, spray=0.02revs) headingOffset {
				use parent=projectile // set the parent to projectile before we overwrite projectile with a new spawn
				Spawn projectile {
				    use body = projectile
					use lifetime=1.0s, radius=0.5*radius

					Body(pos=parent.Pos, heading=parent.Heading+headingOffset, velocity=speed*Direction(heading))
			        Durability = Durability:Maximum
                    RecoverSpeed
                    DecayTurnRate
					Sing(@meteoriteSubprojectile.esfx)
					ExpireAfterLifetime

					PolygonCollider(Circle)
					
					on Paint {
						Spark(splatter=0.5, shadow=0.5)
					}

					on Hurt {
						Strobe(shine=1)
					}

					on AfterCollide that {
						if that.Team != owner.Team {
							Attack(that)

							that.Tombstone victim {
								PlayerNameDisplay(owner)
								" gently nudged "
								PlayerNameDisplay(victim)
								" to their bitter end"
							}
						}
					}
				}
			}

			Expire
		}
	}
}