.. glyph=FireRay:Glyph, color=#00ffff, damage=75.0, lifesteal=0.3, cooldown=5.0s

pub symbol WantBlast

pub fn BlastOption(.. ui) {
	SlotOption<WantBlast> {
		H1 { %("Blast") }

		P {
			%("Concentrate your inner reserves, unleashing a cataclysmic force proportional to the time spent in focused meditation. ")
		}

		P {
			SlotEffect("Luminous Convergence", icon="fas fa-hand-paper") {
				%("Hold the button to charge up your blast, and feel the pulsating layers of energy coalesce with each moment of pure concentration.")
			}
			SlotEffect("Interruptible", icon="fas fa-hand-paper") {
				%("A single blow can shatter your concentration, dissipating the accumulated energy and leaving your devastating assault unfulfilled.")
			}
		}

		SlotStats {
			SlotStat("Damage", icon="fas fa-sword") { %(damage) }
			SlotStat("Lifesteal", icon="fas fa-heart") { %((lifesteal * 100.0) + "%") }
			SlotStat("Cooldown", icon="fas fa-clock") { %((cooldown / TicksPerSecond) + "s") }
		}
	}
}

pub fn ability.BlastAbility(unit, owner, btn) {
	on BotAttacking {
		if Cooldown == 0 {
			BotUseAbility
		}
	}

	Incantation {
		.. ownerColor=true, damage = damage * unit.DamageModifier

		const birth = Tick

		SpeedModifier(-0.5)
		TurnRateModifier(-0.97)

		once Interrupt { StopIncantation }

		if !HasCommenced {
			// Disallow pre-game charging to count during the real game
			once AfterCommence { StopIncantation }
		}

		on BotChannelling {
			const channelDuration=1.0s
			if Tick - birth < channelDuration {
				BotKeepChannelling
			}
		}

		Sing(Blast:ChargingSound)
		await ChargeUntilReleased(2.0s, minProportion=0.1) {
			ChargingIndicator(flicker=0.1)
			CooldownRate(-1)
		}

		Spawn projectile {
			.. parent=unit
			.. damage = damage * ChargeProportion
			.. radius = 1.5 * ChargeProportion, speed=50.0
			.. lifetime=90, dissipation=7
			.. luminous=1.0, depth=Depth:Projectile
			.. feather=1, glare=0.5
			.. density = 100 * ChargeProportion, ccd=true
			.. categories = Category:Projectile | Category:Massive, durability=Durability:Maximum

			LaunchBody
			PrepareForCollision
			PropulsiveMotion
			Sing(Blast:Sound)
			ExpireAfterLifetime

			Collider {
				Shape:Circle
			}

			Bloom(bloom=10*ChargeProportion)
			Smoke(splatter=0.5, shadow=0.5)

			let canHurtSelf = false
			on BeforeCollide that {
				if canHurtSelf || that.Team != owner.Team {
					Attack(that)

					that.Tombstone victim {
						NameBlock(owner)
						%(" farewelled ")
						NameBlock(victim)
						%(" with a bang ")
					}
				}
			}
			on AfterCollide that {
				if that.Category & Category:Shield {
					canHurtSelf = true // Can bounce off shield to hurt self
				}
				if that.Durability >= this.Durability {
					Strobe(growth=0.5)
					Puff(count=5, splatter=1)
					Hear(Blast:HitSound)
					Expire
				}
			}
		}
	}
}

sound Blast:ChargingSound(duration=5s, cutoff=0.5s) {
	Oscillator(wave=$triangle, freq=[4,9], harmonics=[1,2,2.5,4,5,8,10,16])
	Tremolo(volumeModulation=0.8) {
		Oscillator(freq=12)
	}
	Envelope(attack=0.25s, release=0.5s)
}

sound Blast:Sound(duration=1s, cutoff=0.5s) {
	BrownNoise
	LowPass(freq=[8500,2125], q=1)
	Output(into=$mix)

	Input(key=$mix)
	Envelope(attack=0.1s, sustain=0s)
}

sound Blast:HitSound(duration=2s) {
	BrownNoise
	LowPass(freq=500)
	HighPass(freq=100)
	Envelope(attack=0.01s, sustain=0s, release=0.85s)
	Output

	Oscillator(wave=$triangle, freq=[50,0], harmonics=[1,1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2])
	LowPass(freq=300)
	Envelope(attack=0.01s, sustain=0s)
}