use glyph=@glowingHands.svg, color=#44ddff, damage=150.0, duration=2s, lifesteal=0.3, cooldown=5.0s

pub symbol WantBeam

pub fn BeamDescription([ui]) {
    H1 { "Acolyte Beam" }

    P {
        "Harness the power of your indomitable focus to unleash a searing beam that obliterates all in its path. "
    }

    SlotEffect("Interruptible", icon="fas fa-hand-paper") {
        "Should you suffer a strike from a foe, the flow of energy will come to a sudden halt as your concentration fractures. "
    }

    Blank(expand=true)

    SlotStats {
        SlotStat("Damage", icon="fas fa-heart-crack") { %(damage) }
        SlotStat("Lifesteal", icon="fas fa-circle-plus") { %((lifesteal * 100.0) + "%") }
        SlotStat("Cooldown", icon="fas fa-clock") { %((cooldown / TicksPerSecond) + "s") }
    }
}

pub fn BeamOption([ui]) {
	SlotOption(WantBeam) {
        BeamDescription
	}
}

pub fn ability.BeamAbility([unit, owner, keycode, btnEdit?, btnOrder?, btnSize?]) {
    use body=unit, life=unit

	on BotAttacking target {
		if Cooldown == 0 {
			BotUseAbility(utility=Utility:High)
		}
	}

    AbilityCommandBtn {
        BeamDescription
    }

	SpawnEachIncantation incantation {
		use damage = damage * unit.DamageModifier

		on BotChannelling target {
			let angleDelta = AngleDelta(unit.Heading, Angle(target - unit.Pos))
			if angleDelta.Abs() < 0.025rev { // Only keep firing the beam if they are still within range
				BotKeepChannelling
			}
		}

		SpeedModifier(0)
		TurnRateModifier(0.0001)
		CooldownRate(0)

		once Interrupt {
			incantation.Expire
		}

		Sing(@beamCharging.esfx)
		await ChargeForDuration(0.3s) {
			ChargingIndicator
		}

		Sing(@beamChannelling.esfx)
		await Barrage(interval=3, count=duration / interval) index {
			use damage = damage / count

			Spawn projectile {
				use parent=unit, body=projectile
				use ownerColor=true
				use lifetime=30, dissipate=6
				use radius=0.4, speed=240
				use luminous=1, layer=Layer:Projectile

				Body(pos=parent.Pos, heading=parent.Heading, velocity=speed*Direction(heading), bullet=true)
				Durability = Durability:High
				RecoverSpeed
				DecayTurnRate
				ExpireAfterLifetime

				PolygonCollider(
                    Circle,
                    category = Category:Projectile | Category:Disintegrator,
                    density=0.01, restitution=1,
                )

				on Paint {
					Streak(bloom=3, bloomAlpha=1, glare=1, shadow=0, taper=0, diminish=0)
				}

				on BeforeCollide that {
					if CanHurtSelf || that.Team != owner.Team {
						Attack(that)

						that.Tombstone victim {
							PlayerNameDisplay(owner)
							" incinerated "
							PlayerNameDisplay(victim)
							" into nothingness "
						}
					}
				}
				on AfterCollide that {
					if that.Category.Overlaps(Category:Shield) && that.Team != owner.Team  {
						CanHurtSelf = true // Can bounce off shield to hurt self
					}
					if that.Durability >= this.Durability {
						Expire
					}
				}
			}
		}
	}
}