use glyph=@burningDot.svg, color=#ff4400
use damage=10.0, lifesteal=0.3, cooldown=1.5s, maxScale=3, growthDuration=1s

pub symbol WantFireboom

pub fn FireboomDescription([ui]) {
    H1 { "Fireboom" }

    P {
        "Conjure a searing ball of flame that detonates upon impact, engulfing enemies within its fiery radius. Fireboom may be slow, but its wide blast zone leaves few places for your enemies to hide. "
    }

    SlotEffect("Intensifying Inhalation", icon="fas fa-fire") {
        "Fireboom begins life as a tiny ember, then grows to " + maxScale + "x damage over " + (growthDuration / TicksPerSecond) + " second. Cultivate Fireboom's full potential by launching it from afar and giving time for the fiery orb to breathe."
    }

    Blank(expand=true)

    SlotStats {
        SlotStat("Damage", icon="fas fa-heart-crack") { %(damage) }
        SlotStat("Lifesteal", icon="fas fa-circle-plus") { %((lifesteal * 100.0) + "%") }
        SlotStat("Cooldown", icon="fas fa-clock") { %((cooldown / TicksPerSecond) + "s") }
    }
}

pub fn FireboomOption([ui]) {
	SlotOption(WantFireboom) {
        FireboomDescription
	}
}

pub fn ability.FireboomAbility([unit, owner, keycode, btnEdit?, btnOrder?, btnSize?]) {
    use body=unit, life=unit

	on BotAttacking target {
		if Cooldown == 0 {
			BotUseAbility
		}
	}

    AbilityCommandBtn {
        FireboomDescription
    }

	SpawnEachIncantation incantation {
		use damage = damage * unit.DamageModifier

		Spawn projectile {
			use parent=unit, body=projectile
			use aoe = 4 / maxScale, radius = 0.4 / maxScale
			use impulse=107, speed=18.4
			use lifetime=2s, dissipate=18
			use luminous=1, layer=Layer:Projectile

			Body(pos=parent.Pos, heading=parent.Heading, velocity=speed*Direction(heading), bullet=true)
			Durability = Durability:Medium
			RecoverSpeed
			DecayTurnRate
			Sing(@fireboom.esfx)
			ExpireAfterLifetime(lifetime=Velocity:TicksTo(Pointer).Min(lifetime))

			PolygonCollider(
                Circle,
                category=Category:Projectile,
                density=7, restitution=1,
            )

			on AfterCollide that {
				if that.Category.Overlaps(Category:Shield) && that.Team != owner.Team {
					CanHurtSelf = true // Can bounce off shield to hurt self
				}
				if that.Durability >= this.Durability {
					Strobe(shine=1.0)
					Expire
				}
			}

			await Tween(duration=growthDuration, initial=1, final=maxScale) factor {
				use aoe = aoe * factor, radius = radius * factor, damage = damage * factor

				PolygonSprite(shape=Circle(aoe), color=color.Fade(0.95), crater=0.85, layer=Layer:Indicator)

				on Paint {
					Streak(bloom=3, bloomAlpha=1, glare=1, shadow=0.25)
					Spark(splatter=0.4, feather=1, shine=0.5)
				}

				once BeforeDespawn {
					repeat 10 { Spark(speed=10, feather=1, shine=0.5) }
					Spark(radius=aoe, bloom=3, bloomAlpha=0.5, feather=1, glare=0.3, shine=0.2)
					Hear(@fireboomExplode.esfx)

					for that in QueryWithinRadius(aoe, filter=Category:Aoe) {
						if CanHurtSelf || that.Team != owner.Team {
							Attack(that)
							ImpulseAway(that)
							ExpireIfDestructible(that)

							that.Tombstone victim {
								PlayerNameDisplay(owner)
								" combusted "
								PlayerNameDisplay(victim)
								if factor >= 1.0 {
									" from afar "
								}
							}
						}
					}
				}
			}
		}
	}
}