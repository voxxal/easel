.. glyph=ElectricWhip:Glyph, color=#ffaa00
.. damage=32.0, lifesteal=1.0, cooldown=1.5s, lifetime=4, speed=80.0, fastProportion=0.2, buffDuration=3s

pub symbol WantElectroshock

pub fn ElectroshockOption(.. ui) {
	SlotOption<WantElectroshock> {
		H1 { %("Electroshock") }

		P {
			%("Shock your enemies at short-range, siphoning away their vitality through the conduit of crackling electricity. ")
			%("The surge of lightning through your veins also quickens your movement. ")
		}

		P {
			SlotEffect("Surging Swiftness", icon="fas fa-running") {
				%("Move " + (fastProportion * 100) + "% faster for " + (buffDuration / TicksPerSecond) + " seconds, even if you miss.")
			}
		}

		SlotStats {
			SlotStat("Damage", icon="fas fa-sword") { %(damage) }
			SlotStat("Lifesteal", icon="fas fa-heart") { %((lifesteal * 100.0) + "%") }
			SlotStat("Cooldown", icon="fas fa-clock") { %((cooldown / TicksPerSecond) + "s") }
		}
	}
}

pub fn ability.ElectroshockAbility(unit, owner, btn) {
	on BotAttacking target {
		const chaseDistance = speed * lifetime / TicksPerSecond

		if Cooldown == 0 {
			BotUseAbility

		} else {
			// Chase down our enemies
			let chase = target + chaseDistance * Direction(unit.Pos - target)
			BotMoveTo(chase, utility=Utility:Minimum)
		}
	}

	Incantation {
		.. damage = damage * unit.DamageModifier

		SpeedModifier(-1)
		TurnRateModifier(-1)

		await ChargeForDuration(3) {
			ChargingIndicator
		}

		unit.ReplaceBuff<electroshock:fast> {
			SpeedModifier(fastProportion)
			ExpireAfterLifetime(buffDuration)

			hook Vanished {
				if Vanished {
					delete Smoke
				} else {
					Smoke(
						color=color.Fade(0.8), ownerColor=true, luminous=1,
						radius=1.0, depth=Depth:Buff,
						splatter=Splatter:Outwards(5.0),
						feather=0, fade=1, dissipation=30)
				}
			}
		}

		Hear(Electroshock:Sound)
		Spawn projectile {
			.. parent=unit
			.. dissipation=30 
			.. radius=0.4, aoe=1.0, impulse=142
			.. color=#fffcb1, luminous=1.0, depth=Depth:Projectile
			.. density=2.8, ccd=true
			.. categories=Category:Projectile, durability=Durability:Medium
			.. collideWith = Category:Shield | Category:Obstacle

			LaunchBody
			PrepareForCollision
			DriftingMotion
			Movement:WalkWith(unit)
			Smoke(splatter=0.15, feather=1)
			Tether(ancestor=unit, taper=1)
			ExpireAfterLifetime

			Collider {
				Shape:Circle
			}

			let canHurtSelf = false
			on AfterCollide that {
				if that.Category & Category:Shield {
					canHurtSelf = true // Can bounce off shield to hurt self
				}
				if that.Durability >= this.Durability {
					Expire
				}
			}
			once Expire {
				Explosion(aoe)
				Puff(count=7, feather=1, splatter=0.2, flicker=0.25)
				Hear(Electroshock:HitSound)

				Aoe:ForEach that {
					if canHurtSelf || that.Team != owner.Team {
						Attack(that)
						Aoe:Impulse(that)
						Aoe:Destroy(that)

						that.Tombstone victim {
							NameBlock(owner)
							%(" zapped ")
							NameBlock(victim)
						}
					}
				}
			}
		}
	}
}

sound Electroshock:Sound(duration=0.25s) {
	Vibrato(freqModulation=3600) {
		Oscillator(freq=30)
	}
	Oscillator(wave=$triangle, freq=[4800,7200], harmonics=[1,1.33,1.5])
	Tremolo(volumeModulation=[0.2,0]) {
		Oscillator(freq=30)
	}
	Envelope(attack=0.05s, sustain=0s)
	Gain(volume=0.1)
}

sound Electroshock:HitSound(duration=0.15s) {
	Vibrato(freqModulation=[6000,300]) {
		Oscillator(freq=[20,10])
	}
	Oscillator(wave=$triangle, freq=3000, harmonics=[1,1.2,1.4,1.6,1.8,2.4,2.8,3.2,3.6])
	Tremolo(volumeModulation=0.2) {
		Oscillator(freq=3)
	}
	Envelope(attack=0.01s, sustain=0s)
	Gain(volume=0.2)
}