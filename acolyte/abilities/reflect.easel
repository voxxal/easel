use glyph=@shieldReflect.svg, color=#3366ff, cooldown=9s, lifetime=2.0s, slowProportion=0.5
use easeInFraction=0.05

pub symbol WantReflect

pub fn ReflectDescription([ui]) {
    H1 { "Reflect" }

    P {
        "Forge a luminous barrier of shimmering energy that repels enemy projectiles and may even reflect them back upon their caster. Beware, the shield is powerless against the pervasive force of area-of-effect spells."
    }

    SlotEffect("Heavy Protection", icon="fas fa-snowflake") {
        "The weight of the shield slows you down by " + (slowProportion * 100) + "%."
    }

    Blank(expand=true)

    SlotStats {
        SlotStat("Cooldown", icon="fas fa-clock") { %((cooldown / TicksPerSecond) + "s") }
    }
}

pub fn ReflectOption([ui]) {
	SlotOption(WantReflect) {
        ReflectDescription
	}
}

pub fn ability.ReflectAbility([unit, owner, keycode, btnEdit?, btnOrder?, btnSize?]) {
    use body=unit, life=unit

	on BotDeflecting target {
		if Cooldown == 0 {
			BotUseAbility
		}
	}

    AbilityCommandBtn {
        ReflectDescription
    }

	SpawnEachIncantation incantation {
		ability.Subspawn shield {
		    use body=shield
			use dissipate=10, radius=2.1
			use luminous=1, layer=Layer:Shield
			use arc=0.5rev

			Durability = Durability:Reflector
			TurnRateModifier(0.1)
			Sing(@reflect.esfx)
			ExpireAfterLifetime

			PolygonCollider(
                Sector(arc=), body=unit, // Attach this Collider to the unit
                category=Category:Shield, collideWith=Category:Projectile,
                density=0,
            )

			on Hurt {
				Strobe(dissipate=10, shine=1.0, growth=0.25)
			}

			on BeforeCollide that {
				if that.Category.Overlaps(Category:Projectile) {
					Hear(@reflectHit.esfx)
					if that.Team != owner.Team {
						that.Velocity:RedirectTowards(unit.Pos, speedFactor=-1)
					}
				}
			}

			await Tween(duration=lifetime, initial=0, final=1) a {
				use fade = a * 0.5, color=color.Fade(fade)
				use ease = Min(1, a/easeInFraction), radius=radius*ease

				SpeedModifier(1 + a.Mix(-slowProportion, 0))

				if unit.Vanished {
					delete PolygonSprite<shield>

				} else {
					PolygonSprite<shield>(Sector(arc=), body=unit, bloom=5.0, flicker=0.1, shadow=0.25)
				}
			}
		}
	}
}