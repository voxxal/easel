use glyph=@tripleScratches.svg, color=#ff0088
use damage=24.0, numBolts=3, buffDuration=1.75s
use lifesteal=0.3, cooldown=1.5s

pub symbol WantTrifire

pub fn TrifireDescription([ui]) {
    H1 { "Trifire" }

    P {
        "Summon a trinity of scorching flames upon your enemies, engulfing them in a long-lasting burn. The bolts spread outwards, making it challenging for foes to avoid from afar, while up close, the combined power of all three overwhelms even the toughest of adversaries."
    }

    SlotEffect("Stacking Burn", icon="fas fa-fire") {
        const boltDps = damage / (buffDuration / TicksPerSecond) / numBolts
        "Each bolt of Trifire will add another stack of " + boltDps + " damage per second to your enemy. "
        "You must hit them with Trifire at least once every " + (buffDuration / TicksPerSecond) + " seconds to keep the fire burning. "
    }

    Blank(expand=true)

    SlotStats {
        SlotStat("Damage", icon="fas fa-heart-crack") { %(damage) }
        SlotStat("Lifesteal", icon="fas fa-circle-plus") { %((lifesteal * 100.0) + "%") }
        SlotStat("Cooldown", icon="fas fa-clock") { %((cooldown / TicksPerSecond) + "s") }
    }
}

pub fn TrifireOption([ui]) {
	SlotOption(WantTrifire) {
        TrifireDescription
	}
}

pub fn ability.TrifireAbility([unit, owner, keycode, btnEdit?, btnOrder?, btnSize?]) {
    use body=unit, life=unit

	on BotAttacking target {
		if Cooldown == 0 {
			BotUseAbility
		}
	}

    AbilityCommandBtn {
        TrifireDescription
    }

	SpawnEachIncantation incantation {
		use damage = damage * unit.DamageModifier

		await Spray(duration=0, count=numBolts, spray=0.03revs) index headingOffset {
			use damage = damage / count

			Spawn projectile {
				use parent=unit, body=projectile
				use lifetime=2.25s, dissipate=20
				use radius = index == 0 ? 0.20 : 0.12
				use speed = index == 0 ? 30 : 25
				use luminous=1, layer=Layer:Projectile

				Body(pos=parent.Pos, heading=parent.Heading+headingOffset, velocity=speed*Direction(heading), bullet=true)
				Durability = Durability:Medium
                RecoverSpeed(speedDecay=0.03)
                DecayTurnRate
				Sing(@trifire.esfx)
				ExpireAfterLifetime

				PolygonCollider(
                    Circle,
                    category=Category:Projectile,
                    density=13.9, restitution=1,
                )

				on Paint {
					Streak(dissipate=8, bloom=3, bloomAlpha=1, glare=1, shadow=0.25)
				}

				on BeforeCollide that {
					if CanHurtSelf || that.Team != owner.Team {
						Attack(that, damage=0) // All damage is done by Poison, not this - this is to do other things like interrupt the enemy
						if that.HasHp {
							that.StackEffect<burning>(cleansable=true, maxStacks=that.Category.Overlaps(Category:Unit) ? 99 : 0) stacks {
								use body = that

								ExpireAfterLifetime(lifetime=buffDuration)
								Poison(that, damage=(stacks+1)*damage, duration=buffDuration)

                                on Paint {
                                    if that.Invisibility {
                                        await that.Invisibility
                                    } else {
                                        Spark(
                                            radius=1.0, speed=12, layer=Layer:Spark, feather=1, shine=0.5,
                                            color=color.WithOpacity(0.1 + stacks * 0.07), fade=1,
                                            glaze=1)
                                    }
                                }

								that.Tombstone victim {
									PlayerNameDisplay(owner)
									" ignited "
									PlayerNameDisplay(victim)
									if stacks > 0 {
										" and watched them burn "
									}
								}
							}
						}
					}
				}
				on AfterCollide that {
					if that.Category.Overlaps(Category:Shield) && that.Team != owner.Team {
						CanHurtSelf = true // Can bounce off shield to hurt self
					}
					if that.Durability >= this.Durability {
						Strobe(shine=1.0)
						repeat 5 { Spark(splatter=1, dissipate=30, feather=1, shine=0.5) }
						Hear(@trifireHit.esfx)
						Expire
					}
				}
			}
		}
	}
}