use glyph=@boomerangSun.svg, color=#ff00ff, damage=25.0, lifesteal=0.3, cooldown=9.0s

pub symbol WantOrbiter

pub fn OrbiterDescription([ui]) {
    H1 { "Orbiter" }

    P {
        "Summon a powerful energy sphere that orbits you at a fixed range. Keep your foes at this ideal distance and catch them in your burning orbit."
    }

    Blank(expand=true)

    SlotStats {
        SlotStat("Damage", icon="fas fa-heart-crack") { %(damage) }
        SlotStat("Lifesteal", icon="fas fa-circle-plus") { %((lifesteal * 100.0) + "%") }
        SlotStat("Cooldown", icon="fas fa-clock") { %((cooldown / TicksPerSecond) + "s") }
    }
}

pub fn OrbiterOption([ui]) {
	SlotOption(WantOrbiter) {
        OrbiterDescription
	}
}

pub fn ability.OrbiterAbility([unit, owner, keycode, btnEdit?, btnOrder?, btnSize?]) {
    use body=unit, life=unit

	on BotAttacking target {
		if Cooldown == 0 {
			BotUseAbility
		}
	}

    AbilityCommandBtn {
        OrbiterDescription
    }

	SpawnEachIncantation incantation {
		use damage = damage * unit.DamageModifier

		Spawn projectile {
			use parent=unit, body=projectile
			use lifetime=4s, dissipate=30, ownerColor=Alliance:Self
			use radius=0.24, speed=48, bounceSpeed=5
			use luminous=1, layer=Layer:Projectile

			Body(pos=parent.Pos, heading=parent.Heading, velocity=speed*Direction(heading), bullet=true)
			Durability = Durability:Medium
			RecoverSpeed
			DecayTurnRate
			Sing(@orbiter.esfx)
			ExpireAfterLifetime

			PolygonCollider(
                Circle,
                category=Category:Projectile,
                density=1.5, restitution=1,
            )

			Homing(unit, turnProportion=0.04875)

			on Paint {
				Streak(glare=0.5, luminous=0.5, dissipate=60, bloom=3, bloomAlpha=1, glare=1, shadow=0.25)
				Spark(luminous=1, splatter=0.2, feather=1, shine=0.5)
			}

			on BeforeCollide that {
				if that.Team != owner.Team {
					Attack(that)

					that.Tombstone victim {
						PlayerNameDisplay(owner)
						" caught "
						PlayerNameDisplay(victim)
						" in their burning orbit "
					}
				}
			}
			on AfterCollide that {
				if that.Durability >= this.Durability {
					if that.Category.Overlaps(Category:Obstacle) {
						if Speed > bounceSpeed {
							Speed = bounceSpeed
						}
					} else {
						Strobe(growth=1.0, shine=0.5)
						repeat 10 { Spark(splatter=1, feather=1, shine=0.5) }
						Hear(@orbiterHit.esfx)
						Expire
					}
				}
			}
		}
	}
}