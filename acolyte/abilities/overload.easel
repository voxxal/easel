use glyph=@deadlyStrike.svg, color=#ff9900
use damage=30, impulse=1400, selfDamage=10, lifesteal=0.3, cooldown=5s, aoe=4.0

pub symbol WantOverload

pub fn OverloadDescription([ui]) {
    H1 { "Overload" }

    P {
        "Channel your immense power beyond the boundaries of safety, culminating in a formidable explosion that sends your adversaries hurtling away with forceful abandon. "
    }

    SlotEffect("Density Surge", icon="fas fa-weight-hanging") {
        "The surge of energy amplifies your mass, making you resistant to knockback."
    }
    SlotEffect("Excessive Power", icon="fas fa-heart-broken") {
        "The unchecked ferocity of this detonation also deals " + selfDamage + " damage to yourself."
    }

    Blank(expand=true)

    SlotStats {
        SlotStat("Damage", icon="fas fa-heart-crack") { %(damage) }
        SlotStat("Lifesteal", icon="fas fa-circle-plus") { %((lifesteal * 100.0) + "%") }
        SlotStat("Cooldown", icon="fas fa-clock") { %((cooldown / TicksPerSecond) + "s") }
    }
}

pub fn OverloadOption([ui]) {
	SlotOption(WantOverload) {
        OverloadDescription
	}
}

pub fn ability.OverloadAbility([unit, owner, keycode, btnEdit?, btnOrder?, btnSize?]) {
    use body=unit, life=unit

	on BotAttacking target {
		if Cooldown == 0 && Distance(unit.Pos, target) <= aoe {
			BotUseAbility
		}
	}

    AbilityCommandBtn {
        OverloadDescription
    }

	SpawnEachIncantation incantation {
		use radius=1.0, damage=damage * unit.DamageModifier
		use dissipate=30, shine=1.0, bloom=3.0, luminous=1, layer=Layer:Projectile

		on Interrupt interruptor {
			if interruptor.Overlaps(Interruptor:Self) {
				incantation.Expire
			}
		}

		CooldownRate(0)
		SpeedModifier(0)
		KnockbackResistance(5)

		on BotChannelling target {
			if Distance(unit.Pos, target) <= aoe {
				BotKeepChannelling
			}
		}

		Sing(@overloadCharging.esfx)
		await ChargeForDuration(0.5s) {
			ChargingIndicator
			with ChargeProportion {
				PolygonSprite(
                    shape=Circle(aoe * ChargeProportion.Mix(0.75,1.0)),
                    color=color.Fade(0.95), luminous=1, crater=0.85, layer=Layer:Indicator)
			}
		}

		unit.TakeDamage(selfDamage, minHealth=1)
		UngrabThem

		repeat 10 { Spark(speed=26, feather=1, shine=0.5) }
		Spark(radius=aoe, bloom=5, bloomAlpha=0.5, feather=1, glare=0.3, shine=1)
		Hear(@overloadExplode.esfx)

		for that in QueryWithinRadius(aoe, filter=Category:Aoe) {
			if that.Team != owner.Team {
				ImpulseAwayAttenuated(that, attenuate=0.5)
				ExpireIfDestructible(that)
				Attack(that)

				that.Tombstone victim {
					PlayerNameDisplay(owner)
					" was too much for "
					PlayerNameDisplay(victim)
					" to handle"
				}
			}
		}
	}
}