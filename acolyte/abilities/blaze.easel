.. glyph=FireWave:Glyph, color=#ff00cc, damage=10, lifesteal=0.3, speed=64, cooldown=10.0s

pub symbol WantBlaze

pub fn BlazeOption(.. ui) {
	SlotOption<WantBlaze> {
		H1 { %("Blaze") }

		P {
			%("Perform a swift, incendiary dash, setting the battlefield ablaze as you surge through your adversaries. Harness this blazing velocity to skillfully evade peril or bridge distances, adeptly maneuvering yourself into favorable positions amidst the chaos of combat.")
		}

		P {
			SlotEffect("Incendiary Traversal", icon="fas fa-bolt") {
				%("While dashing, you may pass through obstacles and enemies.")
			}
		}

		SlotStats {
			SlotStat("Damage", icon="fas fa-sword") { %(damage) }
			SlotStat("Lifesteal", icon="fas fa-heart") { %((lifesteal * 100.0) + "%") }
			SlotStat("Cooldown", icon="fas fa-clock") { %((cooldown / TicksPerSecond) + "s") }
		}
	}
}

pub fn ability.BlazeAbility(unit, owner, btn) {
	on BotRecovering {
		if Cooldown == 0 {
			BotUseAbility(utility=Utility:Low)
		}
	}

	Incantation {
		.. lifetime=7
		.. radius=0.5, dissipation=12
		.. ownerColor=true, depth=Depth:Projectile
		.. shine=1.0, glare=0.7, bloom=3.0, luminous=1.0

		SpeedModifier(-1) // Don't allow other movement to interfere with the charge
		Tangibility(Category:Solid ^ Category:Hero ^ Category:Obstacle) // Pass through units and obstacles
		SenseAlso(Category:Hero) // Sense units while charging so we can apply damage but don't collide with them
		Sing(Blaze:Sound)

		// Set the new target to be the same as where we're charging towards.
		// This is to stop the unit walking backwards after the thrust is complete when using click-to-move
		Movement:WalkTo(Pointer)
		Proximity:OnArrival(Pointer) {
			StopIncantation
		}

		hook Pointer {
			Thrust(Pointer, speed=)
		}

		on unit.BeforeCollide that {
			if that.Team != owner.Team {
				Attack(that)

				that.Tombstone victim {
					NameBlock(owner)
					%(" charred ")
					NameBlock(victim)
					%(" to ash")
				}
			}
		}

		hook Tick {
			Spawn trail {
				.. parent=unit

				LaunchBody(speed=0)
				Smoke(interval=3, splatter=Splatter:Outwards(12, glide=0.15), bloom=1.5)
				ExpireAfterLifetime(7)
			}
		}

		await Sleep(lifetime)
	}
}

sound Blaze:Sound(duration=0.5s, cutoff=0.25s) {
	BrownNoise
	BandPass(freq=[300,400], q=5)
	Envelope(attack=0.05s, sustain=0s)
}