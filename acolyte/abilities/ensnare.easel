.. glyph=AtomicSlashes:Glyph, color=#0ace00, damage=0.0, cooldown=6s, silenceDuration=0.5s, ensnareDuration=2s

pub symbol WantEnsnare

signal projectile.OnEnsnare(that);

pub fn EnsnareOption(.. ui) {
	SlotOption<WantEnsnare> {
		H1 { %("Ensnare") }

		P {
			%("Trap your adversaries in an inescapable vortex of mystic energy, leaving them immobilized. Seize the moment to unleash a barrage of your deadliest abilities as they lay helpless before you.")
		}

		P {
			SlotEffect("Mystic Silence", icon="fas fa-hourglass-half") {
				%("Your enemy will be unable to use their abilities for " + (silenceDuration / TicksPerSecond) + " seconds.")
			}
		}

		SlotStats {
			SlotStat("Damage", icon="fas fa-sword") { %(damage) }
			SlotStat("Cooldown", icon="fas fa-clock") { %((cooldown / TicksPerSecond) + "s") }
		}
	}
}

pub fn ability.EnsnareAbility(unit, owner, btn) {
	on BotAttacking {
		if Cooldown == 0 {
			BotUseAbility
		}
	}

	Incantation {
		Spawn projectile {
			.. parent=unit
			.. lifetime=5s, dissipation=15
			.. radius=0.5, aoe=3.6, speed=28
			.. luminous=1.0, depth=Depth:Buff
			.. categories=Category:Projectile, durability=Durability:High
			.. isSensor=true, collideWith = Category:Hero | Category:Massive

			ExpireAfterLifetime
			LaunchBody
			PrepareForCollision
			PropulsiveMotion
			CooldownRate(-1)
			Sing(Ensnare:Sound)
			Smoke(
				flutter=Flutter:Swirl(0.2,period=20),
				feather=1, glare=0.4, bloom=1.5,
				splatter=Splatter:Outwards(5.5,glide=0.3),
				shadow=0.5)

			Collider {
				Shape:Circle
			}

			once<deploy> Sleep(Velocity:TicksTo(Pointer)) {
				OnEnsnare(null)
			}
			
			on BeforeCollide that {
				if that.Owner != owner && (that.Category & Category:Hero) {
					ExpireAfterLifetime(ensnareDuration) // Re-extend lifetime if we catch something

					that.Silence(silenceDuration)
					that.Tombstone victim {
						NameBlock(owner)
						%(" held ")
						NameBlock(victim)
						%(" til the end ")
					}

					OnEnsnare(that)
					break // Only catch the first unit that enters the vortex, otherwise could extend lifetime forever
				}
			}
			on AfterCollide that {
				if that.Durability >= this.Durability && !(that.Category & Category:Hero) {
					Expire
				}
			}

			// Plant the vortex either when the projectile reaches the cursor or when it catches a unit
			once OnEnsnare that {
				Speed = 0
				DecayingMotion
				Sing(Ensnare:TrappingSound)

				hook<attractor> Tick {
					Aoe:ForEach(filter=Category:Hero) that {
						Aoe:ImpulseAttenuated(that, impulse=-5, attenuate=0.4)
					}
				}

				await Tween(duration=5, initial=0.0, final=1.0) factor {
					.. aoe = factor * aoe

					Smoke(
						count=3, radius=0.5, flutter=Flutter:Swirl(factor * 1.6, period=20),
						feather=1, glare=0.4, bloom=1.5,
						splatter=Splatter:Outwards(5.5,glide=0.3),
						shadow=0.5)
				}
			}
		}
	}
}

sound Ensnare:Sound(duration=1.5s, cutoff=0.5s) {
	Oscillator(wave=$sawtooth, freq=410, harmonics=[1,1.33,1.4,1.5])
	LowPass(freq=100)
	Envelope(attack=0.05s, sustain=0s)
	Gain(volume=0.5)
}

sound Ensnare:TrappingSound(duration=8s) {
	Oscillator(wave=$sawtooth, freq=[410,415], harmonics=[1,1.33,1.4,1.5])
	LowPass(freq=100)
	Tremolo(volumeModulation=0.6) {
		Oscillator(freq=12)
	}
	Envelope(attack=0.25s)
}